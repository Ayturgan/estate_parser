#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Elasticsearch —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_elasticsearch.py
"""

import sys
import os
import json
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.elasticsearch_service import ElasticsearchService
from config import ELASTICSEARCH_HOSTS, ELASTICSEARCH_INDEX

def test_elasticsearch_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...")
    
    es_service = ElasticsearchService(
        hosts=ELASTICSEARCH_HOSTS,
        index_name=ELASTICSEARCH_INDEX
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health = es_service.health_check()
    print(f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ Elasticsearch: {health}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    success = es_service.create_index()
    if success:
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")
        return False
    
    return True

def test_sample_data():
    """–¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    es_service = ElasticsearchService(
        hosts=ELASTICSEARCH_HOSTS,
        index_name=ELASTICSEARCH_INDEX
    )
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    sample_ads = [
        {
            "id": 1,
            "title": "–ü—Ä–æ–¥–∞–µ—Ç—Å—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ë–∏—à–∫–µ–∫–∞",
            "description": "–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º, –º–µ–±–µ–ª—å—é –∏ —Ç–µ—Ö–Ω–∏–∫–æ–π. –†—è–¥–æ–º –º–µ—Ç—Ä–æ, –º–∞–≥–∞–∑–∏–Ω—ã, —à–∫–æ–ª–∞.",
            "price": 150000,
            "currency": "USD",
            "rooms": 2,
            "area_sqm": 65.5,
            "floor": 5,
            "total_floors": 9,
            "series": "–ü–∞–Ω–µ–ª—å–Ω—ã–π",
            "building_type": "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º",
            "condition": "–•–æ—Ä–æ—à–µ–µ",
            "repair": "–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç",
            "furniture": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
            "heating": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ",
            "hot_water": "–ï—Å—Ç—å",
            "gas": "–ï—Å—Ç—å",
            "ceiling_height": 2.7,
            "city": "–ë–∏—à–∫–µ–∫",
            "district": "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π",
            "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 15",
            "is_vip": False,
            "is_realtor": False,
            "realtor_score": 0.1,
            "duplicates_count": 0,
            "source_name": "lalafo",
            "source_url": "https://lalafo.kg/ad/123",
            "source_id": "123",
            "published_at": "2024-01-15T10:00:00",
            "created_at": "2024-01-15T10:00:00",
            "phone_numbers": ["+996555123456"],
            "photos": [{"url": "https://example.com/photo1.jpg"}],
            "location": {
                "city": "–ë–∏—à–∫–µ–∫",
                "district": "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", 
                "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 15",
                "lat": 42.8746,
                "lon": 74.5698
            }
        },
        {
            "id": 2,
            "title": "–°–¥–∞–º 1-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ–º –¥–æ–º–µ. –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.",
            "price": 25000,
            "currency": "USD",
            "rooms": 1,
            "area_sqm": 45.0,
            "floor": 12,
            "total_floors": 16,
            "series": "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π",
            "building_type": "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º",
            "condition": "–û—Ç–ª–∏—á–Ω–æ–µ",
            "repair": "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç",
            "furniture": "–ß–∞—Å—Ç–∏—á–Ω–æ –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
            "heating": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ",
            "hot_water": "–ï—Å—Ç—å",
            "gas": "–ï—Å—Ç—å",
            "ceiling_height": 3.0,
            "city": "–ë–∏—à–∫–µ–∫",
            "district": "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
            "address": "–ø—Ä. –ß—É–π, 78",
            "is_vip": True,
            "is_realtor": True,
            "realtor_score": 0.9,
            "duplicates_count": 2,
            "source_name": "house",
            "source_url": "https://house.kg/ad/456",
            "source_id": "456",
            "published_at": "2024-01-14T15:30:00",
            "created_at": "2024-01-14T15:30:00",
            "phone_numbers": ["+996700987654"],
            "photos": [{"url": "https://example.com/photo2.jpg"}],
            "location": {
                "city": "–ë–∏—à–∫–µ–∫",
                "district": "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
                "address": "–ø—Ä. –ß—É–π, 78",
                "lat": 42.8765,
                "lon": 74.6123
            }
        },
        {
            "id": 3,
            "title": "–ü—Ä–æ–¥–∞–∂–∞ 3-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —ç–ª–∏—Ç–Ω–æ–º —Ä–∞–π–æ–Ω–µ",
            "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏. –ó–∞–∫—Ä—ã—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –ø–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞.",
            "price": 350000,
            "currency": "USD",
            "rooms": 3,
            "area_sqm": 120.0,
            "floor": 8,
            "total_floors": 12,
            "series": "–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π",
            "building_type": "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å",
            "condition": "–û—Ç–ª–∏—á–Ω–æ–µ",
            "repair": "–ü—Ä–µ–º–∏—É–º —Ä–µ–º–æ–Ω—Ç",
            "furniture": "–ë–µ–∑ –º–µ–±–µ–ª–∏",
            "heating": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ",
            "hot_water": "–ï—Å—Ç—å",
            "gas": "–ï—Å—Ç—å",
            "ceiling_height": 3.2,
            "city": "–ë–∏—à–∫–µ–∫",
            "district": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π",
            "address": "—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 25",
            "is_vip": True,
            "is_realtor": False,
            "realtor_score": 0.2,
            "duplicates_count": 1,
            "source_name": "stroka",
            "source_url": "https://stroka.kg/ad/789",
            "source_id": "789",
            "published_at": "2024-01-13T09:15:00",
            "created_at": "2024-01-13T09:15:00",
            "phone_numbers": ["+996555789012"],
            "photos": [{"url": "https://example.com/photo3.jpg"}],
            "location": {
                "city": "–ë–∏—à–∫–µ–∫",
                "district": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π",
                "address": "—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 25",
                "lat": 42.8789,
                "lon": 74.5987
            }
        }
    ]
    
    # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    success_count = 0
    for ad in sample_ads:
        if es_service.index_ad(ad):
            success_count += 1
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad['id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad['id']}")
    
    print(f"üìä –£—Å–ø–µ—à–Ω–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(sample_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    return success_count == len(sample_ads)

def test_search_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
    
    es_service = ElasticsearchService(
        hosts=ELASTICSEARCH_HOSTS,
        index_name=ELASTICSEARCH_INDEX
    )
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    result = es_service.search_ads(size=10)
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {result.get('total', 0)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    print("2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É '–∫–≤–∞—Ä—Ç–∏—Ä–∞':")
    result = es_service.search_ads(query="–∫–≤–∞—Ä—Ç–∏—Ä–∞", size=5)
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(result.get('hits', []))} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    for hit in result.get('hits', [])[:3]:
        print(f"   - {hit.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (${hit.get('price', 0)})")
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    print("3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–Ω–µ —Ä–∏—ç–ª—Ç–æ—Ä—ã, —Ü–µ–Ω–∞ –¥–æ 200k):")
    result = es_service.search_ads(
        query="–∫–≤–∞—Ä—Ç–∏—Ä–∞",
        filters={'is_realtor': False, 'max_price': 200000},
        size=5
    )
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(result.get('hits', []))} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ VIP –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    print("4Ô∏è‚É£ –ü–æ–∏—Å–∫ VIP –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    result = es_service.search_ads(
        filters={'is_vip': True},
        sort_by='price',
        sort_order='desc',
        size=5
    )
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(result.get('hits', []))} VIP –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
    print("5Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ –û–∫—Ç—è–±—Ä—å—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ:")
    result = es_service.search_ads(
        filters={'district': '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π'},
        size=5
    )
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(result.get('hits', []))} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    return True

def test_aggregations():
    """–¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–π"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–π...")
    
    es_service = ElasticsearchService(
        hosts=ELASTICSEARCH_HOSTS,
        index_name=ELASTICSEARCH_INDEX
    )
    
    aggregations = es_service.get_aggregations()
    
    print("–ì–æ—Ä–æ–¥–∞:")
    for city in aggregations.get('cities', [])[:5]:
        print(f"   {city['key']}: {city['doc_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\n–†–∞–π–æ–Ω—ã:")
    for district in aggregations.get('districts', [])[:5]:
        print(f"   {district['key']}: {district['doc_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
    for source in aggregations.get('sources', []):
        print(f"   {source['key']}: {source['doc_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\n–î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω:")
    for price_range in aggregations.get('price_ranges', []):
        print(f"   {price_range['key']}: {price_range['doc_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")
    for rooms in aggregations.get('rooms', []):
        print(f"   {rooms['key']} –∫–æ–º–Ω.: {rooms['doc_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    return True

def test_suggestions():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("\nüí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è...")
    
    es_service = ElasticsearchService(
        hosts=ELASTICSEARCH_HOSTS,
        index_name=ELASTICSEARCH_INDEX
    )
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
    suggestions = es_service.suggest_addresses("–ë–∏—à–∫–µ–∫", 5)
    print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è '–ë–∏—à–∫–µ–∫': {suggestions}")
    
    suggestions = es_service.suggest_addresses("–õ–µ–Ω–∏–Ω–∞", 3)
    print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è '–õ–µ–Ω–∏–Ω–∞': {suggestions}")
    
    return True

def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è Elasticsearch
        response = requests.get(f"{base_url}/elasticsearch/health")
        if response.status_code == 200:
            print("‚úÖ /elasticsearch/health - OK")
        else:
            print(f"‚ùå /elasticsearch/health - {response.status_code}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response = requests.get(f"{base_url}/elasticsearch/stats")
        if response.status_code == 200:
            print("‚úÖ /elasticsearch/stats - OK")
        else:
            print(f"‚ùå /elasticsearch/stats - {response.status_code}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        response = requests.get(f"{base_url}/search?q=–∫–≤–∞—Ä—Ç–∏—Ä–∞&size=3")
        if response.status_code == 200:
            print("‚úÖ /search - OK")
        else:
            print(f"‚ùå /search - {response.status_code}")
        
        # –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–π
        response = requests.get(f"{base_url}/search/aggregations")
        if response.status_code == 200:
            print("‚úÖ /search/aggregations - OK")
        else:
            print(f"‚ùå /search/aggregations - {response.status_code}")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elasticsearch –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n")
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_elasticsearch_connection():
        print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not test_sample_data():
        print("‚ùå –¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫
    if not test_search_functionality():
        print("‚ùå –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 4: –ê–≥—Ä–µ–≥–∞—Ü–∏–∏
    if not test_aggregations():
        print("‚ùå –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–π –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if not test_suggestions():
        print("‚ùå –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 6: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if not test_api_endpoints():
        print("‚ö†Ô∏è API —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Elasticsearch –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 