#!/usr/bin/env python3

import imagehash
from PIL import Image
import requests
from io import BytesIO

def download_image(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return Image.open(BytesIO(response.content))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return None

def calculate_hashes(image):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ö–µ—à–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        return {
            'aHash': str(imagehash.average_hash(image)),
            'dHash': str(imagehash.dhash(image)),
            'pHash': str(imagehash.phash(image)),
            'wHash': str(imagehash.whash(image))
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–µ–π: {e}")
        return None

def hamming_distance(hash1, hash2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –•—ç–º–º–∏–Ω–≥–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ö–µ—à–∞–º–∏"""
    return sum(c1 != c2 for c1, c2 in zip(hash1, hash2))

def calculate_similarity(hash1, hash2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –•—ç–º–º–∏–Ω–≥–∞"""
    distance = hamming_distance(hash1, hash2)
    max_distance = len(hash1)
    return 1.0 - (distance / max_distance)

# URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
urls = [
    "https://img5.lalafo.com/i/posters/original/ea/7a/46/zemelnyj-ucastok-s-kartofelnym-polem-id-42789990-846728634.jpeg",  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ 106
    "https://data.stroka.kg/image/big/4143377.jpg",  # –î—É–±–ª–∏–∫–∞—Ç 290
    "https://data.stroka.kg/image/big/4194577.jpg",  # –î—É–±–ª–∏–∫–∞—Ç 322
    "https://data.stroka.kg/image/big/4176620.jpg",  # –î—É–±–ª–∏–∫–∞—Ç 357
    "https://data.stroka.kg/image/big/4194619.jpg",  # –î—É–±–ª–∏–∫–∞—Ç 347
]

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
print("=" * 80)

hashes_list = []
for i, url in enumerate(urls):
    print(f"\nüì∏ –§–æ—Ç–æ {i+1}: {url}")
    image = download_image(url)
    if image:
        hashes = calculate_hashes(image)
        if hashes:
            hashes_list.append(hashes)
            print(f"   –•–µ—à–∏: {hashes}")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à–∏")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

print("\n" + "=" * 80)
print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π...")

if len(hashes_list) >= 2:
    base_hashes = hashes_list[0]  # –•–µ—à–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ 106)
    
    for i, compare_hashes in enumerate(hashes_list[1:], 1):
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ 1 vs —Ñ–æ—Ç–æ {i+1}:")
        
        best_similarity = 0.0
        for hash_type in ['aHash', 'dHash', 'pHash', 'wHash']:
            if hash_type in base_hashes and hash_type in compare_hashes:
                hash1 = base_hashes[hash_type]
                hash2 = compare_hashes[hash_type]
                
                similarity = calculate_similarity(hash1, hash2)
                distance = hamming_distance(hash1, hash2)
                
                print(f"   {hash_type}: —Å—Ö–æ–∂–µ—Å—Ç—å={similarity:.3f}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={distance}")
                
                if similarity > best_similarity:
                    best_similarity = similarity
        
        print(f"   üéØ –õ—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {best_similarity:.3f}")
        
        if best_similarity >= 0.3:
            print(f"   ‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥ 0.3")
        else:
            print(f"   ‚ùå –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥ 0.3") 