class AutomationManager {
    constructor() {
        this.refreshInterval = null;
        this.logsInterval = null;
        this.currentStatus = null;
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.startAutoRefresh();
        this.loadStatus();
        this.loadScrapingSources();
    }
    
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        document.getElementById('start-btn').addEventListener('click', () => this.startPipeline());
        document.getElementById('stop-btn').addEventListener('click', () => this.stopPipeline());
        document.getElementById('refresh-btn').addEventListener('click', () => this.loadStatus());
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —É–±—Ä–∞–Ω—ã - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    }
    
    async startPipeline() {
        try {
            const response = await fetch('/api/automation/start', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('üöÄ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω!', 'success');
                this.loadStatus();
            } else {
                this.showNotification(result.message, 'warning');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞', 'error');
            console.error('Error starting pipeline:', error);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è pausePipeline —É–¥–∞–ª–µ–Ω–∞
    
    async stopPipeline() {
        try {
            const response = await fetch('/api/automation/stop', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            if (response.ok) {
                this.showNotification('üõë –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
                this.loadStatus();
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞', 'error');
            console.error('Error stopping pipeline:', error);
        }
    }
    
    async loadStatus() {
        try {
            const response = await fetch('/api/automation/status');
            const status = await response.json();
            
            this.currentStatus = status;
            this.updateUI(status);
        } catch (error) {
            console.error('Error loading status:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    }
    
    updateUI(status) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.currentStatus && this.currentStatus.pipeline_status !== status.pipeline_status) {
            if (this.currentStatus.pipeline_status === 'running' && status.pipeline_status === 'completed') {
                this.showNotification('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            } else if (this.currentStatus.pipeline_status === 'running' && status.pipeline_status === 'error') {
                this.showNotification('‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 'error');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
        const statusElement = document.getElementById('pipeline-status');
        const statusInfo = this.getStatusInfo(status.pipeline_status);
        statusElement.innerHTML = `<i class="bi ${statusInfo.icon}"></i> ${statusInfo.text}`;
        statusElement.className = `badge ${statusInfo.class} ${statusInfo.animation}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.updateControlButtons(status.pipeline_status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        this.updateConfigInfo(status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateTimeInfo(status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        this.updateCurrentStage(status);
        
        // –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–æ–≤ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞"
    }
    
    getStatusInfo(status) {
        const statusMap = {
            'idle': { 
                text: '–ì–æ—Ç–æ–≤', 
                class: 'bg-success', 
                icon: 'bi-circle-fill',
                animation: ''
            },
            'running': { 
                text: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', 
                class: 'bg-warning', 
                icon: 'bi-arrow-clockwise',
                animation: 'pulse'
            },
            'completed': { 
                text: '–ó–∞–≤–µ—Ä—à–µ–Ω', 
                class: 'bg-info', 
                icon: 'bi-check-circle-fill',
                animation: ''
            },
            'error': { 
                text: '–û—à–∏–±–∫–∞', 
                class: 'bg-danger', 
                icon: 'bi-exclamation-triangle-fill',
                animation: ''
            },
            // –°—Ç–∞—Ç—É—Å "paused" —É–¥–∞–ª–µ–Ω
        };
        return statusMap[status] || { text: status.toUpperCase(), class: 'bg-secondary', icon: 'bi-question-circle-fill', animation: '' };
    }
    
    updateControlButtons(status) {
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
        
        if (status === 'running') {
            startBtn.disabled = true;
            stopBtn.disabled = false;
        } else {
            startBtn.disabled = false;
            stopBtn.disabled = true;
        }
    }
    
    updateConfigInfo(status) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        const autoModeElement = document.getElementById('config-auto-mode');
        const intervalElement = document.getElementById('config-interval');
        const sourcesElement = document.getElementById('config-sources');
        const stagesElement = document.getElementById('config-stages');
        
        if (autoModeElement) {
            autoModeElement.className = status.is_auto_mode ? 'badge bg-success' : 'badge bg-danger';
            autoModeElement.innerHTML = status.is_auto_mode ? '<i class="bi bi-check-circle"></i> –í–∫–ª—é—á–µ–Ω' : '<i class="bi bi-x-circle"></i> –û—Ç–∫–ª—é—á–µ–Ω';
        }
        
        if (intervalElement) {
            intervalElement.className = 'badge bg-primary';
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ —á–∞—Å–∞, –∏–Ω–∞—á–µ —á–∞—Å—ã
            if (status.interval_minutes && status.interval_minutes < 60) {
                intervalElement.innerHTML = `<i class="bi bi-clock"></i> ${status.interval_minutes} –º–∏–Ω.`;
            } else {
                intervalElement.innerHTML = `<i class="bi bi-clock"></i> ${status.interval_hours} —á–∞—Å.`;
            }
        }
        
        if (sourcesElement) {
            sourcesElement.className = 'badge bg-info';
            const sourcesText = status.scraping_sources ? status.scraping_sources.join(', ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
            sourcesElement.innerHTML = `<i class="bi bi-list"></i> ${sourcesText}`;
        }
        
        if (stagesElement) {
            stagesElement.innerHTML = '';
            const stageNames = {
                'scraping': '–ü–∞—Ä—Å–∏–Ω–≥',
                'photo_processing': '–§–æ—Ç–æ',
                'duplicate_processing': '–î—É–±–ª–∏–∫–∞—Ç—ã',
                'realtor_detection': '–†–∏—ç–ª—Ç–æ—Ä—ã',
                'elasticsearch_reindex': '–ü–æ–∏—Å–∫'
            };
            
            Object.entries(status.enabled_stages).forEach(([stageKey, enabled]) => {
                const stageBadge = document.createElement('span');
                stageBadge.className = `badge ${enabled ? 'bg-success' : 'bg-secondary'} me-1`;
                stageBadge.innerHTML = `
                    <i class="bi ${enabled ? 'bi-check-circle' : 'bi-x-circle'}"></i>
                    ${stageNames[stageKey] || stageKey}
                `;
                stagesElement.appendChild(stageBadge);
            });
        }
    }
    
    updateTimeInfo(status) {
        const lastRunStart = document.getElementById('last-run-start');
        const lastRunEnd = document.getElementById('last-run-end');
        const nextRun = document.getElementById('next-run');
        
        if (lastRunStart) {
            lastRunStart.textContent = status.last_run_start 
                ? this.formatDateTime(status.last_run_start) 
                : '‚Äî';
        }
        
        if (lastRunEnd) {
            lastRunEnd.textContent = status.last_run_end 
                ? this.formatDateTime(status.last_run_end) 
                : '‚Äî';
        }
        
        if (nextRun) {
            nextRun.textContent = status.next_run_scheduled 
                ? this.formatDateTime(status.next_run_scheduled) 
                : '‚Äî';
        }
    }
    
    updateCurrentStage(status) {
        const currentStageDiv = document.getElementById('current-stage');
        const currentStageName = document.getElementById('current-stage-name');
        const currentProgress = document.getElementById('current-progress');
        const currentStageDetails = document.getElementById('current-stage-details');
        
        if (status.pipeline_status === 'running' && status.current_stage) {
            currentStageDiv.style.display = 'block';
            
            const stageNames = {
                'scraping': '–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤',
                'photo_processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                'duplicate_processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
                'realtor_detection': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤',
                'elasticsearch_reindex': '–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞'
            };
            
            currentStageName.textContent = stageNames[status.current_stage] || status.current_stage;
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
            const stageInfo = status.stage_details && status.stage_details[status.current_stage];
            if (stageInfo) {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
                let progressPercent = 0;
                const stageKey = status.current_stage;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞
                if (stageInfo.status === 'completed') {
                    progressPercent = 100; // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç—Ç–∞–ø = 100%
                } else if (stageInfo.status === 'running') {
                    // –î–ª—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è —ç—Ç–∞–ø–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if (stageKey === 'scraping') {
                        const progress = stageInfo.progress || {};
                        const total = progress.total || 0;
                        const completed = progress.sources_completed || 0;
                        progressPercent = total > 0 ? Math.round((completed / total) * 100) : 10;
                    } else if (stageKey === 'photo_processing') {
                        const progress = stageInfo.progress || {};
                        const total = progress.total || 0;
                        const processed = progress.processed || 0;
                        progressPercent = total > 0 ? Math.round((processed / total) * 100) : 10;
                    } else if (stageKey === 'duplicate_processing') {
                        const progress = stageInfo.progress || {};
                        const processed = progress.processed || 0;
                        const remaining = progress.remaining || 0;
                        const total = processed + remaining;
                        progressPercent = total > 0 ? Math.round((processed / total) * 100) : 10;
                    } else if (stageKey === 'realtor_detection') {
                        const progress = stageInfo.progress || {};
                        const processed = progress.processed || 0;
                        const total = progress.total || 0;
                        progressPercent = total > 0 ? Math.round((processed / total) * 100) : 10;
                    } else if (stageKey === 'elasticsearch_reindex') {
                        const progress = stageInfo.progress || {};
                        const indexed = progress.indexed || 0;
                        const total = progress.total || 0;
                        progressPercent = total > 0 ? Math.round((indexed / total) * 100) : 10;
                    } else {
                        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –Ω–∞—á–∏–Ω–∞–µ–º —Å 10%
                        progressPercent = 10;
                    }
                    
                    // –ú–∏–Ω–∏–º—É–º 5% –¥–ª—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è —ç—Ç–∞–ø–æ–≤, –º–∞–∫—Å–∏–º—É–º 95%
                    if (progressPercent < 5) {
                        progressPercent = 5;
                    } else if (progressPercent > 95) {
                        progressPercent = 95;
                    }
                } else {
                    progressPercent = 0; // Idle –∏–ª–∏ error = 0%
                }
                
                currentProgress.style.width = `${progressPercent}%`;
                currentProgress.setAttribute('aria-valuenow', progressPercent);
                
                // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                currentStageDetails.innerHTML = '';
            }
        } else {
            currentStageDiv.style.display = 'none';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updatePipelineStats(status);
    }
    
    updatePipelineStats(status) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
        const stats = status.stats || {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const newAdsElement = document.getElementById('stat-new-ads');
        const processedAdsElement = document.getElementById('stat-processed-ads');
        const duplicatesElement = document.getElementById('stat-duplicates');
        const realtorsElement = document.getElementById('stat-realtors');
        
        if (newAdsElement) newAdsElement.textContent = (stats.new_ads || 0).toLocaleString();
        if (processedAdsElement) processedAdsElement.textContent = (stats.processed_ads || 0).toLocaleString();
        if (duplicatesElement) duplicatesElement.textContent = (stats.duplicates_found || 0).toLocaleString();
        if (realtorsElement) realtorsElement.textContent = (stats.realtors_found || 0).toLocaleString();
    }
    
    // –§—É–Ω–∫—Ü–∏—è updateStageDetails —É–¥–∞–ª–µ–Ω–∞ - —ç—Ç–∞–ø—ã —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞"
    
    getProgressText(stageKey, stageInfo) {
        if (stageKey === 'scraping') {
            const progress = stageInfo.progress || {};
            const active = progress.sources_active || 0;
            const completed = progress.sources_completed || 0;
            const total = progress.total || 0;
            const newAds = progress.new_ads || 0;
            const processedAds = progress.processed_ads || 0;
            
            if (total === 0) return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...';
            
            let statusText = `–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${completed}/${total} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
            if (active > 0) statusText += `, ${active} –∞–∫—Ç–∏–≤–Ω—ã—Ö`;
            if (newAds > 0) statusText += `<br/>üìà –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${newAds}`;
            if (processedAds > 0) statusText += `<br/>‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedAds}`;
            
            return statusText;
            
        } else if (stageKey === 'photo_processing') {
            const progress = stageInfo.progress || {};
            const downloaded = progress.photos_downloaded || 0;
            const optimized = progress.photos_optimized || 0;
            const processed = progress.processed || 0;
            const total = progress.total || 0;
            
            if (total === 0) return '–ü–æ–¥—Å—á–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...';
            
            let statusText = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}/${total}`;
            if (downloaded > 0) statusText += `<br/>üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${downloaded}`;
            if (optimized > 0) statusText += `<br/>üé® –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${optimized}`;
            
            return statusText;
            
        } else if (stageKey === 'duplicate_processing') {
            const progress = stageInfo.progress || {};
            const found = progress.duplicates_found || 0;
            const processed = progress.processed || 0;
            const remaining = progress.remaining || 0;
            const groups = progress.groups_created || 0;
            
            let statusText = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`;
            if (remaining > 0) statusText += `, –æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}`;
            statusText += `<br/>üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${found}`;
            if (groups > 0) statusText += `<br/>üìÇ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: ${groups}`;
            
            return statusText;
            
        } else if (stageKey === 'realtor_detection') {
            const progress = stageInfo.progress || {};
            const processed = progress.processed || 0;
            const detected = progress.detected || 0;
            const total = progress.total || 0;
            
            let statusText = total > 0 ? `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}/${total}` : `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`;
            statusText += `<br/>üë§ –ù–∞–π–¥–µ–Ω–æ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤: ${detected}`;
            
            return statusText;
            
        } else if (stageKey === 'elasticsearch_reindex') {
            const progress = stageInfo.progress || {};
            const indexed = progress.indexed || 0;
            const total = progress.total || 0;
            
            return total > 0 ? `–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${indexed}/${total} –∑–∞–ø–∏—Å–µ–π` : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞...';
        }
        
        return stageInfo.message || '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    }
    
    formatDateTime(dateString) {
        try {
            const date = new Date(dateString);
            return date.toLocaleString('ru-RU', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch {
            return dateString;
        }
    }
    
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        
        document.body.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 5000);
    }
    
    startAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        this.refreshInterval = setInterval(() => {
            this.loadStatus();
            this.loadScrapingSources();
        }, 3000);
    }
    
    // –§—É–Ω–∫—Ü–∏—è emergencyStop —É–¥–∞–ª–µ–Ω–∞
    
    async loadScrapingSources() {
        try {
            const [jobsResponse, statusResponse] = await Promise.all([
                fetch('/api/scraping/jobs'),
                fetch('/api/automation/status')
            ]);
            
            const jobs = await jobsResponse.json();
            const status = await statusResponse.json();
            
            this.updateScrapingSources(jobs, status.scraping_sources || []);
        } catch (error) {
            console.error('Error loading scraping sources:', error);
        }
    }
    
    updateScrapingSources(jobs, sources) {
        const container = document.getElementById('scraping-sources');
        container.innerHTML = '';
        
        const sourceIcons = {
            'house': 'bi-house',
            'lalafo': 'bi-shop',
            'stroka': 'bi-building'
        };
        
        sources.forEach(source => {
            // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            const sourceJobs = jobs.filter(job => job.config === source).sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );
            
            const lastJob = sourceJobs[0];
            const isRunning = lastJob && lastJob.status === '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
            
            const colDiv = document.createElement('div');
            colDiv.className = 'col-md-4 mb-3';
            
            let statusBadge = '';
            let statusClass = '';
            let progressInfo = '';
            
            if (isRunning) {
                statusBadge = '<span class="badge bg-warning pulse">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</span>';
                statusClass = 'border-warning';
                progressInfo = `
                    <div class="progress mb-2" style="height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                             style="width: 50%" role="progressbar"></div>
                    </div>
                    <small class="text-muted">–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ...</small>
                `;
            } else {
                const lastStatus = lastJob ? lastJob.status : '–Ω–µ –∑–∞–ø—É—â–µ–Ω';
                if (lastStatus === '–∑–∞–≤–µ—Ä—à–µ–Ω–æ') {
                    statusBadge = '<span class="badge bg-success">–ó–∞–≤–µ—Ä—à–µ–Ω</span>';
                    statusClass = 'border-success';
                    progressInfo = `
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-success" style="width: 100%" role="progressbar"></div>
                        </div>
                        <small class="text-success">–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</small>
                    `;
                } else if (lastStatus === '–æ—à–∏–±–∫–∞') {
                    statusBadge = '<span class="badge bg-danger">–û—à–∏–±–∫–∞</span>';
                    statusClass = 'border-danger';
                    progressInfo = `
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-danger" style="width: 0%" role="progressbar"></div>
                        </div>
                        <small class="text-danger">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</small>
                    `;
                } else {
                    statusBadge = '<span class="badge bg-secondary">–ì–æ—Ç–æ–≤</span>';
                    statusClass = '';
                    progressInfo = `
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-secondary" style="width: 0%" role="progressbar"></div>
                        </div>
                        <small class="text-muted">–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞</small>
                    `;
                }
            }
            
            colDiv.innerHTML = `
                <div class="card h-100 ${statusClass}">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <i class="bi ${sourceIcons[source] || 'bi-globe'} me-2"></i>
                            <strong>${source.toUpperCase()}</strong>
                        </div>
                        ${statusBadge}
                    </div>
                    <div class="card-body">
                        ${progressInfo}
                        ${lastJob ? `<div class="mt-2 small text-muted">
                            <i class="bi bi-clock"></i> –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${this.formatDateTime(lastJob.created_at)}
                        </div>` : ''}
                    </div>
                </div>
            `;
            
            container.appendChild(colDiv);
        });
    }
    
    async startSource(source) {
        try {
            const response = await fetch(`/api/scraping/start/${source}`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            const result = await response.json();
            
            if (response.ok) {
                this.showNotification(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ ${source} –∑–∞–ø—É—â–µ–Ω!`, 'success');
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${source}: ${result.message}`, 'error');
            }
            
            this.loadScrapingSources();
        } catch (error) {
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${source}`, 'error');
            console.error(`Error starting ${source}:`, error);
        }
    }
    
    async stopSource(source, jobId) {
        try {
            const response = await fetch(`/api/scraping/stop/${jobId}`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            if (response.ok) {
                this.showNotification(`üõë –ü–∞—Ä—Å–∏–Ω–≥ ${source} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, 'warning');
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${source}`, 'error');
            }
            
            this.loadScrapingSources();
        } catch (error) {
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${source}`, 'error');
            console.error(`Error stopping ${source}:`, error);
        }
    }
    
    async startAllSources() {
        try {
            const response = await fetch('/api/scraping/start-all', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            if (response.ok) {
                this.showNotification('üöÄ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã!', 'success');
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            }
            
            this.loadScrapingSources();
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            console.error('Error starting all sources:', error);
        }
    }
    
    async stopAllSources() {
        try {
            const jobsResponse = await fetch('/api/scraping/jobs');
            const jobs = await jobsResponse.json();
            
            const runningJobs = jobs.filter(job => job.status === '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            
            if (runningJobs.length === 0) {
                this.showNotification('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞', 'info');
                return;
            }
            
            const stopPromises = runningJobs.map(job => 
                fetch(`/api/scraping/stop/${job.id}`, { method: 'POST' })
            );
            
            await Promise.all(stopPromises);
            
            this.showNotification(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${runningJobs.length} –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞`, 'warning');
            this.loadScrapingSources();
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            console.error('Error stopping all sources:', error);
        }
    }
    
    destroy() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }
        if (this.logsInterval) {
            clearInterval(this.logsInterval);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.automationManager = new AutomationManager();
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (window.automationManager) {
        window.automationManager.destroy();
    }
});
