from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, Query
from sqlalchemy.orm import Session
import logging
from datetime import datetime

from app.database import get_db
from app.services.websocket_manager import websocket_manager
from app.services.event_emitter import event_emitter, EventType

logger = logging.getLogger(__name__)

websocket_router = APIRouter()

logger.info("üîå WebSocket —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")

@websocket_router.websocket("/ws/")
async def websocket_endpoint(
    websocket: WebSocket,
    token: str = Query(...),
    db: Session = Depends(get_db)
):
    """WebSocket endpoint –¥–ª—è real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    connection_id = None
    
    logger.info(f"üîå WebSocket connection attempt from {websocket.client.host}:{websocket.client.port}")
    logger.info(f"üîë Token received: {token[:50]}..." if token and len(token) > 50 else f"üîë Token received: {token}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        connection_id = await websocket_manager.connect(websocket, token, db)
        
        if not connection_id:
            logger.warning("‚ùå WebSocket connection failed - no connection_id returned")
            return
        
        logger.info(f"‚úÖ WebSocket connected successfully: {connection_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await send_initial_data(connection_id, db)
        
        # –°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        while True:
            try:
                data = await websocket.receive_text()
                await handle_websocket_message(connection_id, data, db)
            except WebSocketDisconnect:
                logger.info(f"üì° WebSocket disconnected: {connection_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå Error processing WebSocket message: {e}")
                break
                
    except WebSocketDisconnect:
        logger.info(f"üì° WebSocket disconnected: {connection_id}")
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
        logger.exception("Full traceback:")
    finally:
        if connection_id:
            websocket_manager.disconnect(connection_id)

async def send_initial_data(connection_id: str, db: Session):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
    try:
        from app.utils.duplicate_processor import DuplicateProcessor
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        processor = DuplicateProcessor(db)
        duplicate_stats = processor.get_duplicate_statistics()
        realtor_stats = processor.get_realtor_statistics()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        await websocket_manager.send_to_connection(connection_id, {
            "type": "initial_stats",
            "data": {
                "duplicate_stats": duplicate_stats,
                "realtor_stats": realtor_stats,
                "websocket_connections": websocket_manager.get_connection_count()
            }
        })
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        recent_events = event_emitter.get_recent_events(20)
        for event in recent_events:
            await websocket_manager.send_to_connection(connection_id, {
                "type": "event",
                "event_type": event.type.value,
                "data": event.data,
                "timestamp": event.timestamp.isoformat(),
                "source": event.source
            })
        
    except Exception as e:
        logger.error(f"Error sending initial data: {e}")

async def send_automation_status(connection_id: str, db: Session):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    try:
        from app.services.automation_service import automation_service
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        status = automation_service.get_status()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {status}")
        
        await websocket_manager.send_to_connection(connection_id, {
            "type": "event",
            "event_type": "automation_status",
            "data": status,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error sending automation status: {e}")

async def send_scraping_sources(connection_id: str, db: Session):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        from app.services.automation_service import automation_service
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        sources = automation_service.scraping_sources
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            from app.services.scrapy_manager import scrapy_manager
            jobs = await scrapy_manager.get_all_jobs()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            jobs = []
        
        await websocket_manager.send_to_connection(connection_id, {
            "type": "event",
            "event_type": "scraping_sources_update",
            "data": {
                "sources": sources,
                "jobs": jobs
            },
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error sending scraping sources: {e}")

async def handle_websocket_message(connection_id: str, message: str, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        import json
        data = json.loads(message)
        message_type = data.get("type")
        
        if message_type == "ping":
            # Pong –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await websocket_manager.send_to_connection(connection_id, {
                "type": "pong",
                "timestamp": datetime.now().isoformat()
            })
            
        elif message_type == "request_stats":
            # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await send_initial_data(connection_id, db)
            
        elif message_type == "request_recent_events":
            # –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
            limit = data.get("limit", 50)
            recent_events = event_emitter.get_recent_events(limit)
            
            await websocket_manager.send_to_connection(connection_id, {
                "type": "recent_events",
                "data": [
                    {
                        "event_type": event.type.value,
                        "data": event.data,
                        "timestamp": event.timestamp.isoformat(),
                        "source": event.source
                    }
                    for event in recent_events
                ]
            })
            
        elif message_type == "request_automation_status":
            # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {connection_id}")
            await send_automation_status(connection_id, db)
            
        elif message_type == "request_scraping_sources":
            # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {connection_id}")
            await send_scraping_sources(connection_id, db)
            
        else:
            logger.warning(f"Unknown WebSocket message type: {message_type}")
            
    except json.JSONDecodeError:
        logger.error(f"Invalid JSON in WebSocket message: {message}")
    except Exception as e:
        logger.error(f"Error handling WebSocket message: {e}")

# API endpoints –¥–ª—è WebSocket –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@websocket_router.get("/ws/status")
async def websocket_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    return {
        "active_connections": websocket_manager.get_connection_count(),
        "connected_users": websocket_manager.get_connected_users()
    }

@websocket_router.get("/ws/events/recent")
async def get_recent_events(limit: int = 50):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    events = event_emitter.get_recent_events(limit)
    return [
        {
            "event_type": event.type.value,
            "data": event.data,
            "timestamp": event.timestamp.isoformat(),
            "source": event.source
        }
        for event in events
    ]

@websocket_router.post("/ws/broadcast")
async def broadcast_message(message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    await websocket_manager.broadcast(message)
    return {"status": "broadcasted", "connections": websocket_manager.get_connection_count()} 