import asyncio
import aiohttp
import logging
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.database.database import SessionLocal
from app.database import db_models
from datetime import datetime
import time
from collections import defaultdict
from app.core.config import get_link_validation_batch_size

logger = logging.getLogger(__name__)

class LinkValidationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.status = "idle"
        self.progress = {
            "total": 0,
            "valid": 0,
            "invalid": 0,
            "deleted": 0,
            "processed": 0
        }
        self.started_at = None
        self.completed_at = None
        self.error = None
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è (agency.kg –∏—Å–∫–ª—é—á–µ–Ω)
        self.excluded_domains = ['agency.kg']
        
    def _get_db(self) -> Session:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î"""
        return SessionLocal()
    
    async def check_url_status_async(self, session: aiohttp.ClientSession, url: str) -> tuple:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ URL"""
        try:
            async with session.head(url, allow_redirects=True, timeout=aiohttp.ClientTimeout(total=15)) as response:
                code = response.status
                if code == 200:
                    return url, "valid"
                elif code == 404:
                    return url, "invalid"
                elif code == 410:
                    return url, "invalid"
                elif code == 302:
                    return url, "valid"  # –†–µ–¥–∏—Ä–µ–∫—Ç —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
                elif code in [403, 429, 500, 502, 503, 504]:
                    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏
                    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {code} –¥–ª—è {url}")
                    return url, "valid"
                else:
                    return url, "valid"  # –î—Ä—É–≥–∏–µ –∫–æ–¥—ã —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏
        except asyncio.TimeoutError:
            logger.debug(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è {url}")
            return url, "valid"  # –¢–∞–π–º–∞—É—Ç —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
        except Exception as e:
            error_str = str(e).lower()
            if any(keyword in error_str for keyword in ['timeout', 'connection', 'dns', 'ssl']):
                logger.debug(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {str(e)}")
                return url, "valid"  # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏
            else:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {url}: {str(e)}")
                return url, "invalid"
    
    def should_skip_domain(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–º–µ–Ω"""
        try:
            domain = url.split('/')[2]
            return domain in self.excluded_domains
        except:
            return False
    
    async def validate_links_batch(self, urls: List[str], batch_size: int = None) -> List[tuple]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –±–∞—Ç—á–∞–º–∏"""
        if batch_size is None:
            batch_size = get_link_validation_batch_size()
        results = []
        
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(limit=50)) as session:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
            for i in range(0, len(urls), batch_size):
                batch_urls = urls[i:i + batch_size]
                tasks = [self.check_url_status_async(session, url) for url in batch_urls]
                batch_results = await asyncio.gather(*tasks, return_exceptions=True)
                results.extend(batch_results)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(urls):
                    await asyncio.sleep(1)
        
        return results
    
    async def start_validation(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫"""
        if self.status == "running":
            logger.warning("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        self.status = "running"
        self.started_at = datetime.now()
        self.error = None
        self.progress = {
            "total": 0,
            "valid": 0,
            "invalid": 0,
            "deleted": 0,
            "processed": 0
        }
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.create_task(self._run_validation())
            logger.info("üöÄ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
            self.status = "error"
            self.error = str(e)
            self.completed_at = datetime.now()
            return False
    
    async def _run_validation(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫"""
        db = None
        try:
            db = self._get_db()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ source_url –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            query = text("""
                SELECT DISTINCT a.source_url 
                FROM ads a
                JOIN unique_ads ua ON a.id = ua.base_ad_id
                WHERE a.source_url IS NOT NULL
                UNION
                SELECT DISTINCT a.source_url 
                FROM ads a
                JOIN ad_duplicates ad ON a.id = ad.original_ad_id
                WHERE a.source_url IS NOT NULL
            """)
            
            result = db.execute(query)
            urls = [row[0] for row in result.fetchall()]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            filtered_urls = [url for url in urls if not self.should_skip_domain(url)]
            
            self.progress["total"] = len(filtered_urls)
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(filtered_urls)} —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏—Å–∫–ª—é—á–µ–Ω–æ {len(urls) - len(filtered_urls)} –∏–∑ agency.kg)")
            
            if not filtered_urls:
                self.status = "completed"
                self.completed_at = datetime.now()
                logger.info("‚úÖ –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –±–∞—Ç—á–∞–º–∏
            batch_size = get_link_validation_batch_size()
            invalid_urls = []
            
            for i in range(0, len(filtered_urls), batch_size):
                batch_urls = filtered_urls[i:i + batch_size]
                batch_results = await self.validate_links_batch(batch_urls, batch_size)
                
                for url, status in batch_results:
                    self.progress["processed"] += 1
                    
                    if status == "valid":
                        self.progress["valid"] += 1
                    else:
                        self.progress["invalid"] += 1
                        invalid_urls.append(url)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if self.progress["processed"] % 500 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.progress['processed']}/{self.progress['total']} "
                              f"(–≤–∞–ª–∏–¥–Ω—ã—Ö: {self.progress['valid']}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {self.progress['invalid']})")
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            if invalid_urls:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º {len(invalid_urls)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏...")
                deleted_count = await self._delete_invalid_ads(db, invalid_urls)
                self.progress["deleted"] = deleted_count
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            self.status = "completed"
            self.completed_at = datetime.now()
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                       f"–í—Å–µ–≥–æ: {self.progress['total']}, "
                       f"–í–∞–ª–∏–¥–Ω—ã—Ö: {self.progress['valid']}, "
                       f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {self.progress['invalid']}, "
                       f"–£–¥–∞–ª–µ–Ω–æ: {self.progress['deleted']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
            self.status = "error"
            self.error = str(e)
            self.completed_at = datetime.now()
        finally:
            if db:
                db.close()
    
    async def _delete_invalid_ads(self, db: Session, invalid_urls: List[str]) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            invalid_ads = db.query(db_models.DBAd).filter(
                db_models.DBAd.source_url.in_(invalid_urls)
            ).all()
            
            deleted_count = 0
            
            for ad in invalid_ads:
                try:
                    # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–î —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    db.delete(ad)
                    deleted_count += 1
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad.id}: {e}")
                    continue
            
            db.commit()
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            db.rollback()
            return 0
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return {
            "status": self.status,
            "progress": self.progress,
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
            "error": self.error
        }
    
    def stop_validation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.status == "running":
            self.status = "stopped"
            self.completed_at = datetime.now()
            logger.info("üõë –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
link_validation_service = LinkValidationService() 