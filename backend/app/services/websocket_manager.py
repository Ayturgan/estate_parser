import json
import asyncio
import logging
from typing import Dict, List, Any, Optional
from fastapi import WebSocket, WebSocketDisconnect
from datetime import datetime
import jwt
from sqlalchemy.orm import Session

from app.services.auth_service import AuthService

logger = logging.getLogger(__name__)

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.auth_service = AuthService()
        
    async def connect(self, websocket: WebSocket, token: str, db: Session) -> Optional[str]:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ Bearer —Ñ–æ—Ä–º–∞—Ç, —Ç–∞–∫ –∏ –Ω–∞–ø—Ä—è–º—É—é
            if not token:
                await websocket.close(code=4001, reason="No token provided")
                return None
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Bearer, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
            if token.startswith("Bearer "):
                token_value = token.split(" ")[1]
            else:
                # –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–µ)
                token_value = token
            admin = self.auth_service.get_admin_by_token(db, token_value)
            
            if not admin:
                await websocket.close(code=4001, reason="Invalid or expired token")
                return None
            
            await websocket.accept()
            connection_id = f"admin_{admin.id}_{datetime.now().timestamp()}"
            self.active_connections[connection_id] = websocket
            
            logger.info(f"WebSocket connected: {admin.username} ({connection_id})")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            total_connections = len(self.active_connections)
            if total_connections == 1:
                logger.info("üü¢ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω - –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            else:
                logger.info(f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {total_connections}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_to_connection(connection_id, {
                "type": "connection_established",
                "data": {
                    "connection_id": connection_id,
                    "user": admin.username,
                    "timestamp": datetime.now().isoformat()
                }
            })
            
            return connection_id
            
        except Exception as e:
            logger.error(f"WebSocket connection error: {e}")
            await websocket.close(code=4000, reason="Connection failed")
            return None
    
    def disconnect(self, connection_id: str):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        if connection_id in self.active_connections:
            del self.active_connections[connection_id]
            logger.info(f"WebSocket disconnected: {connection_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            remaining_connections = len(self.active_connections)
            if remaining_connections == 0:
                logger.info("üî¥ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ñ–ª–∞–π–Ω - –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            else:
                logger.info(f"üë• –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {remaining_connections}")
    
    async def send_to_connection(self, connection_id: str, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é"""
        if connection_id in self.active_connections:
            try:
                websocket = self.active_connections[connection_id]
                await websocket.send_text(json.dumps(message, default=str))
            except Exception as e:
                logger.error(f"Error sending to {connection_id}: {e}")
                self.disconnect(connection_id)
    
    async def broadcast(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message_text = json.dumps(message, default=str)
        disconnected = []
        
        for connection_id, websocket in self.active_connections.items():
            try:
                await websocket.send_text(message_text)
            except Exception as e:
                logger.error(f"Error broadcasting to {connection_id}: {e}")
                disconnected.append(connection_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection_id in disconnected:
            self.disconnect(connection_id)
    
    async def broadcast_to_admins(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        await self.broadcast(message)
    
    def get_connection_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return len(self.active_connections)
    
    def get_connected_users(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return list(self.active_connections.keys())
    
    def is_anyone_online(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return len(self.active_connections) > 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
websocket_manager = WebSocketManager() 