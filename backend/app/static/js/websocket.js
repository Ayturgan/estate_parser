/**
 * WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
class WebSocketClient {
    constructor() {
        this.ws = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 1000;
        this.isConnected = false;
        this.eventHandlers = new Map();
        this.notificationDebounce = {};
        
        // C–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.initAuthListener();
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥—ã
        this.diagnoseEnvironment();
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥—ã –¥–ª—è ngrok
    diagnoseEnvironment() {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebSocket —Å—Ä–µ–¥—ã:');
        console.log('- –ü—Ä–æ—Ç–æ–∫–æ–ª:', window.location.protocol);
        console.log('- –•–æ—Å—Ç:', window.location.host);
        console.log('- –ü–æ—Ä—Ç:', window.location.port);
        console.log('- –ü—É—Ç—å:', window.location.pathname);
        
        const isNgrok = window.location.host.includes('ngrok') || window.location.host.includes('ngrok-free.app');
        console.log('- Ngrok –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', isNgrok);
        
        if (isNgrok) {
            console.log('‚ö†Ô∏è  Ngrok –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:');
            console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å ngrok —Å: ngrok http 8000 --host-header=rewrite');
            console.log('  2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ WebSocket –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            console.log('  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000');
        }
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    initAuthListener() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        window.addEventListener('auth_token_received', (e) => {
            console.log('üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º WebSocket...');
            this.connect(e.detail.token);
        });
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        window.addEventListener('auth_logout', () => {
            console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket');
            this.disconnect();
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const existingToken = getAuthToken();
        if (existingToken) {
            console.log('üîë –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
            console.log('üîë –¢–æ–∫–µ–Ω:', existingToken ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
            this.connect(existingToken);
        } else {
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        }
    }
    
    // HTTP polling –¥–ª—è ngrok (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ WebSocket)
    initHttpPolling(token) {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP polling –¥–ª—è ngrok...');
        console.log('üîÑ –¢–æ–∫–µ–Ω –¥–ª—è polling:', token ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
        this.pollingToken = token;
        this.pollingInterval = null;
        this.lastEventId = 0;
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.isConnected = true;
        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        setRealtimeIndicator(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º polling
        this.startPolling();
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.emit('connected', {});
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.requestInitialData();
        
        console.log('‚úÖ HTTP polling –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    }
    
    startPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
        }
        
        this.pollingInterval = setInterval(() => {
            this.pollForUpdates();
        }, 2000); // –û–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        console.log('üì° HTTP polling –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)');
    }
    
    async pollForUpdates() {
        try {
            console.log('üì° –í—ã–ø–æ–ª–Ω—è–µ–º HTTP polling...');
            const response = await fetch('/api/stats', {
                headers: {
                    'Authorization': `Bearer ${this.pollingToken}`
                }
            });
            
            console.log('üì° HTTP polling –æ—Ç–≤–µ—Ç:', response.status);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ polling:', Object.keys(data));
                // –≠–º—É–ª–∏—Ä—É–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
                this.handleInitialStats(data);
            } else {
                console.error('‚ùå HTTP polling –æ—à–∏–±–∫–∞:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP polling:', error);
        }
    }
    
    async requestInitialData() {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statsResponse = await fetch('/api/stats', {
                headers: {
                    'Authorization': `Bearer ${this.pollingToken}`
                }
            });
            
            if (statsResponse.ok) {
                const stats = await statsResponse.json();
                this.handleInitialStats(stats);
            }
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            if (window.location.pathname === '/automation') {
                const automationResponse = await fetch('/api/automation/status', {
                    headers: {
                        'Authorization': `Bearer ${this.pollingToken}`
                    }
                });
                
                if (automationResponse.ok) {
                    const automationStatus = await automationResponse.json();
                    this.handleEvent('automation_status', automationStatus);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    stopPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }
        console.log('üì° HTTP polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    on(eventType, handler) {
        if (!this.eventHandlers.has(eventType)) {
            this.eventHandlers.set(eventType, []);
        }
        this.eventHandlers.get(eventType).push(handler);
    }
    
    off(eventType, handler) {
        if (this.eventHandlers.has(eventType)) {
            const handlers = this.eventHandlers.get(eventType);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }
    
    emit(eventType, data) {
        if (this.eventHandlers.has(eventType)) {
            this.eventHandlers.get(eventType).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in event handler for ${eventType}:`, error);
                }
            });
        }
    }
    
    connect(token) {
        if (!token) {
            console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –±–µ–∑ —Ç–æ–∫–µ–Ω–∞.');
            return;
        }

        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            console.log('WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
            this.reconnect();
            return;
        }

        console.log('‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket...');
        
        const fullToken = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        let wsUrl = `${protocol}//${window.location.host}/ws?token=${encodeURIComponent(fullToken)}`;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ngrok
        if (window.location.host.includes('ngrok') || window.location.host.includes('ngrok-free.app')) {
            console.log('üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω ngrok, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ HTTP polling –≤–º–µ—Å—Ç–æ WebSocket');
            this.initHttpPolling(token);
            return;
        }
        
        console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
        
        this.ws = new WebSocket(wsUrl);
            
        this.ws.onopen = () => {
            console.log('‚úÖ WebSocket connected successfully');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.reconnectDelay = 1000;
            // –û—á–∏—â–∞–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            this.notificationDebounce = {};
            // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            this.stopScrapingProgressAnimation();
            this.stopDuplicateProgressAnimation();
            setRealtimeIndicator(true);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.send({
                type: 'request_stats'
            });
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            this.emit('connected', {});
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            if (window.location.pathname === '/automation') {
                console.log('üîó –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å...');
                this.send({
                    type: 'request_automation_status'
                });
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                this.send({
                    type: 'request_scraping_sources'
                });
            }
        };
        
        this.ws.onmessage = (event) => {
        try {
            const data = JSON.parse(event.data);
            this.handleMessage(data);
        } catch (error) {
            console.error('Error parsing WebSocket message:', error);
        }
        };
        
        this.ws.onerror = (error) => {
            console.error('‚ùå WebSocket error:', error);
            console.error('WebSocket URL:', wsUrl);
            console.error('WebSocket readyState:', this.ws?.readyState);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ngrok
            if (window.location.host.includes('ngrok') || window.location.host.includes('ngrok-free.app')) {
                console.error('üîó –û—à–∏–±–∫–∞ WebSocket —á–µ—Ä–µ–∑ ngrok. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ngrok –∑–∞–ø—É—â–µ–Ω —Å —Ñ–ª–∞–≥–æ–º --host-header=rewrite');
                console.error('–ü—Ä–∏–º–µ—Ä: ngrok http 8000 --host-header=rewrite');
            }
        };
        
        this.ws.onclose = (event) => {
            console.log('üîå WebSocket disconnected:', event.code, event.reason);
            this.isConnected = false;
            setRealtimeIndicator(false);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            if (event.code === 1006) {
                console.error('‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ (–∫–æ–¥ 1006). –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                console.error('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
                console.error('- –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                console.error('- –ü—Ä–æ–±–ª–µ–º—ã —Å ngrok (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)');
            } else if (event.code === 1011) {
                console.error('‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç —Å–µ—Ä–≤–µ—Ä–æ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ (–∫–æ–¥ 1011)');
            } else if (event.code === 1000) {
                console.log('‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            }
            
            if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {
                this.reconnect();
            }
        };
    }
    
    reconnect() {
        if (this.ws) {
            this.ws.onclose = null; // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            this.ws.close();
        }

        this.reconnectAttempts++;
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
        
        console.log(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
        
        setTimeout(() => {
            const token = getAuthToken(); // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Ç–æ–∫–µ–Ω
            if (token) {
                this.connect(token);
            } else {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
            }
        }, delay);
    }
    
    disconnect() {
        if (this.ws) {
            this.ws.close(1000);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP polling –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        this.stopPolling();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.stopScrapingProgressAnimation();
        this.stopDuplicateProgressAnimation();
    }
    
    send(data) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(data));
        } else if (this.pollingInterval) {
            // –î–ª—è HTTP polling –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º send, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
            console.log('üì° HTTP polling —Ä–µ–∂–∏–º: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º WebSocket send:', data);
        }
    }
    
    handleMessage(data) {
        const { type, event_type, data: eventData } = data;
        
        if (type === 'event') {
            this.handleEvent(event_type, eventData);
        } else if (type === 'initial_stats') {
            this.handleInitialStats(eventData);
        } else if (type === 'connection_established') {
            console.log('üîó WebSocket connection established:', eventData);
        } else if (type === 'pong') {
            // Pong –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            console.log('üèì Pong received');
        } else {
            console.log('Unknown message type:', type);
        }
    }
    
    handleEvent(eventType, data) {
        console.log(`üì° Event received: ${eventType}`, data);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.emit(eventType, data);
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        switch (eventType) {
            case 'connected':
                // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ onopen
                break;
            case 'stats_update':
                this.updateDashboardStats(data);
                break;
                
            case 'automation_status':
                this.updateAutomationStatus(data);
                break;
                
            case 'automation_completed':
                this.handleAutomationCompleted(data);
                break;
                
            case 'automation_error':
                this.handleAutomationError(data);
                break;
                
            case 'scraping_progress':
                this.updateScrapingProgress(data);
                break;
                
            case 'scraping_started':
                this.handleScrapingStarted(data);
                break;
                
            case 'scraping_completed':
                this.handleScrapingCompleted(data);
                break;
                
            case 'scraping_error':
                this.handleScrapingError(data);
                break;
                
            case 'scraping_sources_update':
                this.updateScrapingSources(data);
                break;
                
            case 'duplicate_processing_progress':
                this.updateDuplicateProgress(data);
                break;
                
            case 'duplicate_processing_completed':
                this.handleDuplicateCompleted(data);
                break;
                
            case 'system_status':
                this.updateSystemStatus(data);
                break;
                
            case 'new_ad_created':
                this.handleNewAd(data);
                break;
                
            case 'duplicate_detected':
                this.handleDuplicateDetected(data);
                break;
                
            case 'realtor_detected':
                this.handleRealtorDetected(data);
                break;
                
            case 'success':
            case 'error':
            case 'warning':
            case 'info':
                this.showNotification(eventType, data);
                break;
                
            default:
                console.log(`Unhandled event type: ${eventType}`);
        }
    }
    
    handleInitialStats(data) {
        console.log('üìä Initial stats received:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞
        if (data.duplicate_stats) {
            this.updateDashboardStats(data.duplicate_stats);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        this.updateSystemStatus({
            status: 'healthy',
            connections: data.websocket_connections
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    
    updateDashboardStats(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatCard('total-unique-ads', stats.total_unique_ads);
        this.updateStatCard('total-ads', stats.total_original_ads);
        this.updateStatCard('duplicates', stats.total_duplicates);
        this.updateStatCard('realtor-ads', stats.realtor_ads);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ratio
        const ratioElement = document.getElementById('deduplication-ratio');
        if (ratioElement && stats.deduplication_ratio !== undefined) {
            ratioElement.textContent = `${stats.deduplication_ratio.toFixed(1)}%`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        this.updateDashboardCharts(stats);
    }
    
    updateStatCard(elementId, newValue) {
        const element = document.getElementById(elementId);
        if (element && element.textContent !== newValue.toString()) {
            element.textContent = newValue.toLocaleString();
            element.parentElement.classList.add('highlight-new');
            setTimeout(() => {
                element.parentElement.classList.remove('highlight-new');
            }, 3000);
        }
    }
    
    updateDashboardCharts(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.dashboardCharts) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            if (window.dashboardCharts.deduplicationChart) {
                window.dashboardCharts.deduplicationChart.data.datasets[0].data = [
                    stats.total_unique_ads, 
                    stats.total_duplicates
                ];
                window.dashboardCharts.deduplicationChart.update();
            }
        }
    }
    
    updateAutomationStatus(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        if (window.automationManager) {
            window.automationManager.updateUI(data);
        }
    }
    
    handleAutomationCompleted(data) {
        console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        if (window.automationManager) {
            window.automationManager.showNotification('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            window.automationManager.loadStatus();
        }
    }
    
    handleAutomationError(data) {
        console.log('‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏:', data.error);
        if (window.automationManager) {
            window.automationManager.showNotification('‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 'error');
            window.automationManager.loadStatus();
        }
    }
    
    updateScrapingProgress(data) {
        const { progress, total, completed, active } = data;
        const container = document.getElementById('scraping-progress-container');
        const progressBar = document.getElementById('scraping-progress');
        const progressText = document.getElementById('scraping-progress-text');
        
        if (container && progressBar && progressText) {
            if (active > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                container.style.display = 'block';
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                this.startScrapingProgressAnimation(progressBar, progressText);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                progressText.textContent = `–ü–∞—Ä—Å–∏–Ω–≥: ${completed}/${total} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ${active} –∞–∫—Ç–∏–≤–Ω–æ`;
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                container.style.display = 'none';
                this.stopScrapingProgressAnimation();
            }
        }
    }
    
    startScrapingProgressAnimation(progressBar, progressText) {
        if (!progressBar) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.stopScrapingProgressAnimation();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        progressBar.style.width = '0%';
        progressBar.setAttribute('aria-valuenow', '0');
        progressBar.classList.add('progress-bar-animated');
        
        const duration = 30000; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const startTime = Date.now();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–Ω–∏–º–∞—Ü–∏–∏
        this.scrapingProgressAnimation = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min((elapsed / duration) * 100, 85); // –ú–∞–∫—Å–∏–º—É–º 85% –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            
            progressBar.style.width = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', Math.round(progress));
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞
            if (progress >= 85) {
                this.stopScrapingProgressAnimation();
            }
        }, 100);
    }
    
    stopScrapingProgressAnimation() {
        if (this.scrapingProgressAnimation) {
            clearInterval(this.scrapingProgressAnimation);
            this.scrapingProgressAnimation = null;
        }
        
        const progressBar = document.getElementById('scraping-progress');
        if (progressBar) {
            progressBar.classList.remove('progress-bar-animated');
        }
    }
    
    handleScrapingStarted(data) {
        const { job_id, config } = data;
        console.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: ${config} (${job_id})`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        this.addScrapingJob({
            id: job_id,
            config: config,
            status: '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            created_at: new Date().toISOString()
        });
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const notificationKey = `scraping_started:${job_id}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        if (window.activeNotifications && window.activeNotifications.has(notificationKey)) {
            console.log('–î—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', config);
            return;
        }
        
        this.showNotification('success', {
            title: '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω',
            message: `–ó–∞–¥–∞—á–∞ ${config} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞`
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.activeNotifications) {
            window.activeNotifications.add(notificationKey);
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                window.activeNotifications.delete(notificationKey);
            }, 10000);
        }
    }
    
    handleScrapingCompleted(data) {
        const { job_id, config, stats } = data;
        console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${config} (${job_id})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        this.updateScrapingJobStatus(job_id, '–∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const notificationKey = `scraping_completed:${job_id}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        if (window.activeNotifications && window.activeNotifications.has(notificationKey)) {
            console.log('–î—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', config);
            return;
        }
        
        this.showNotification('success', {
            title: '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω',
            message: `–ó–∞–¥–∞—á–∞ ${config} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats?.scraped_items || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.activeNotifications) {
            window.activeNotifications.add(notificationKey);
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                window.activeNotifications.delete(notificationKey);
            }, 10000);
        }
    }
    
    handleScrapingError(data) {
        const { job_id, config, error } = data;
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${config} (${job_id}) - ${error}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        this.updateScrapingJobStatus(job_id, '–æ—à–∏–±–∫–∞');
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const notificationKey = `scraping_error:${job_id}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        if (window.activeNotifications && window.activeNotifications.has(notificationKey)) {
            console.log('–î—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', config);
            return;
        }
        
        this.showNotification('error', {
            title: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
            message: `–ó–∞–¥–∞—á–∞ ${config} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: ${error}`
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.activeNotifications) {
            window.activeNotifications.add(notificationKey);
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                window.activeNotifications.delete(notificationKey);
            }, 10000);
        }
    }
    
    updateDuplicateProgress(data) {
        const { progress, total, processed, active } = data;
        const container = document.getElementById('duplicate-progress-container');
        const progressBar = document.getElementById('duplicate-progress');
        const progressText = document.getElementById('duplicate-progress-text');
        
        if (container && progressBar && progressText) {
            if (active > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                container.style.display = 'block';
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                this.startDuplicateProgressAnimation(progressBar, progressText);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${processed}/${total} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${active} –∞–∫—Ç–∏–≤–Ω–æ`;
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                container.style.display = 'none';
                this.stopDuplicateProgressAnimation();
            }
        }
    }
    
    startDuplicateProgressAnimation(progressBar, progressText) {
        if (!progressBar) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.stopDuplicateProgressAnimation();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        progressBar.style.width = '0%';
        progressBar.setAttribute('aria-valuenow', '0');
        progressBar.classList.add('progress-bar-animated');
        
        const duration = 25000; // 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const startTime = Date.now();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–Ω–∏–º–∞—Ü–∏–∏
        this.duplicateProgressAnimation = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min((elapsed / duration) * 100, 80); // –ú–∞–∫—Å–∏–º—É–º 80% –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            
            progressBar.style.width = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', Math.round(progress));
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞
            if (progress >= 80) {
                this.stopDuplicateProgressAnimation();
            }
        }, 100);
    }
    
    stopDuplicateProgressAnimation() {
        if (this.duplicateProgressAnimation) {
            clearInterval(this.duplicateProgressAnimation);
            this.duplicateProgressAnimation = null;
        }
        
        const progressBar = document.getElementById('duplicate-progress');
        if (progressBar) {
            progressBar.classList.remove('progress-bar-animated');
        }
    }
    
    handleDuplicateCompleted(data) {
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
        
        this.showNotification('success', {
            title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        });
    }
    
    updateSystemStatus(data) {
        const { status, connections } = data;
        
        const indicator = document.getElementById('status-indicator');
        const text = document.getElementById('status-text');
        
        if (indicator && text) {
            if (status === 'healthy') {
                indicator.className = 'bi bi-circle-fill text-success';
                text.textContent = '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç';
                indicator.title = `–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connections || 0}`;
            } else {
                indicator.className = 'bi bi-circle-fill text-danger';
                text.textContent = '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã';
                indicator.title = data.error || '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã';
            }
        }
    }
    
    handleNewAd(data) {
        const { ad_id, title, source } = data;
        console.log(`üè† –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${title} (${source})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateStatCard('total-ads', 
            parseInt(document.getElementById('total-ads')?.textContent || '0') + 1
        );
    }
    
    handleDuplicateDetected(data) {
        const { ad_id, unique_ad_id, similarity } = data;
        console.log(`üîç –î—É–±–ª–∏–∫–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${ad_id} -> ${unique_ad_id} (${similarity.toFixed(2)})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateStatCard('duplicates', 
            parseInt(document.getElementById('duplicates')?.textContent || '0') + 1
        );
    }
    
    handleRealtorDetected(data) {
        const { phone, ads_count } = data;
        console.log(`üë§ –†–∏—ç–ª—Ç–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${phone} (${ads_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateStatCard('realtor-ads', 
            parseInt(document.getElementById('realtor-ads')?.textContent || '0') + ads_count
        );
    }
    
    showNotification(type, data) {
        const { title, message } = data;
        const fullMessage = title ? `${title}: ${message}` : message;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        // –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≥–¥–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
        if (fullMessage.includes('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤') || fullMessage.includes('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')) {
            const currentPath = window.location.pathname;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–∞—à–±–æ—Ä–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            if (!['/dashboard', '/automation', '/'].includes(currentPath)) {
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö —Å–∫—Ä—ã—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', currentPath);
                return;
            }
        }
        
        // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const debounceKey = `${type}:${fullMessage}`;
        if (this.notificationDebounce && this.notificationDebounce[debounceKey]) {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º:', fullMessage);
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        if (!this.notificationDebounce) {
            this.notificationDebounce = {};
        }
        this.notificationDebounce[debounceKey] = true;
        setTimeout(() => {
            delete this.notificationDebounce[debounceKey];
        }, 3000);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.showNotification) {
            window.showNotification(type, fullMessage);
        } else {
            // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            window.activeNotifications = window.activeNotifications || new Set();
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            const notificationKey = `${type}:${fullMessage}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.activeNotifications.has(notificationKey)) {
                console.log('–î—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (websocket.js):', fullMessage);
                return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            window.activeNotifications.add(notificationKey);
            
            const alertClass = type === 'error' ? 'danger' : type;
            const notificationId = 'notification-' + Date.now() + Math.random().toString(36).substr(2, 9);
            
            const alertHtml = `
                <div id="${notificationId}" class="alert alert-${alertClass} alert-dismissible fade show position-fixed notification-alert" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 400px;" 
                     role="alert" data-notification-key="${notificationKey}">
                    ${fullMessage}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            const notificationElement = document.getElementById(notificationId);
            if (notificationElement) {
                const closeButton = notificationElement.querySelector('.btn-close');
                if (closeButton) {
                    closeButton.addEventListener('click', () => {
                        window.activeNotifications.delete(notificationKey);
                    });
                }
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                const notification = document.getElementById(notificationId);
                if (notification) {
                    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                    window.activeNotifications.delete(notificationKey);
                    
                    notification.style.transform = 'translateX(100%)';
                    notification.style.opacity = '0';
                    setTimeout(() => {
                        notification.remove();
                    }, 300);
                }
            }, 5000);
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    
    addScrapingJob(job) {
        const container = document.getElementById('scraping-jobs-container');
        if (container && window.createJobElement) {
            const jobElement = window.createJobElement(job);
            container.insertBefore(jobElement, container.firstChild);
        }
    }
    
    updateScrapingJobStatus(jobId, status) {
        const jobElement = document.querySelector(`[data-job-id="${jobId}"]`);
        if (jobElement) {
            const statusBadge = jobElement.querySelector('.status-badge');
            if (statusBadge) {
                statusBadge.textContent = status;
                statusBadge.className = `badge ${this.getStatusClass(status)} status-badge`;
            }
        }
    }
    
    getStatusClass(status) {
        const statusMap = {
            '–æ–∂–∏–¥–∞–Ω–∏–µ': 'bg-secondary',
            '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 'bg-warning',
            '–∑–∞–≤–µ—Ä—à–µ–Ω–æ': 'bg-success',
            '–æ—à–∏–±–∫–∞': 'bg-danger',
            '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ': 'bg-info'
        };
        return statusMap[status] || 'bg-secondary';
    }
    
    updateScrapingStatus() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        if (window.updateScrapingStatus) {
            window.updateScrapingStatus();
        }
    }
    
    updateScrapingSources(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if (window.automationManager) {
            window.automationManager.updateScrapingSources(data.jobs || [], data.sources || []);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function setRealtimeIndicator(connected) {
    console.log(`üî¥üü¢ setRealtimeIndicator –≤—ã–∑–≤–∞–Ω —Å: ${connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    const indicator = document.getElementById('realtime-indicator');
    console.log(`üî¥üü¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç:`, indicator ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (indicator) {
        if (connected) {
            indicator.classList.remove('disconnected');
            indicator.classList.add('connected');
            indicator.title = 'HTTP polling –∞–∫—Ç–∏–≤–µ–Ω (ngrok —Ä–µ–∂–∏–º)';
            console.log('üü¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        } else {
            indicator.classList.remove('connected');
            indicator.classList.add('disconnected');
            indicator.title = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
            console.log('üî¥ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã
        console.log('üî¥üü¢ –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', indicator.className);
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç realtime-indicator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ ID
        const allElements = document.querySelectorAll('[id*="indicator"]');
        console.log('üîç –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å "indicator" –≤ ID:', allElements);
    }
} 