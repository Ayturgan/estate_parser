class AutomationManager {
    constructor() {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ AutomationManager...');
        this.currentStatus = null;
        this.refreshInterval = null;
        
        this.init();
        console.log('‚úÖ AutomationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutomationManager...');
        this.bindEvents();
        this.startAutoRefresh();
        this.loadStatus();
        this.loadScrapingSources();
        this.setupWebSocketHandlers();
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutomationManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        document.getElementById('start-btn').addEventListener('click', () => this.startPipeline());
        document.getElementById('stop-btn').addEventListener('click', () => this.stopPipeline());
        document.getElementById('refresh-btn').addEventListener('click', () => this.loadStatus());
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —É–±—Ä–∞–Ω—ã - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    }
    
    async startPipeline() {
        try {
            const response = await fetch('/api/automation/start', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('üöÄ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω!', 'success');
                this.loadStatus();
            } else {
                this.showNotification(result.message, 'warning');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞', 'error');
            console.error('Error starting pipeline:', error);
        }
    }
    
    async stopPipeline() {
        try {
            const response = await fetch('/api/automation/stop', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            });
            
            if (response.ok) {
                this.showNotification('üõë –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
                this.loadStatus();
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞', 'error');
            console.error('Error stopping pipeline:', error);
        }
    }
    
    async loadStatus() {
        try {
            const response = await fetch('/api/automation/status');
            const status = await response.json();
            
            this.currentStatus = status;
            this.updateUI(status);
        } catch (error) {
            console.error('Error loading status:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    }
    
    updateUI(status) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ status –Ω–µ undefined
            if (!status) {
                console.warn('‚ùå –ü–æ–ª—É—á–µ–Ω undefined status –≤ updateUI');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (this.currentStatus && this.currentStatus.pipeline_status !== status.pipeline_status) {
                if (this.currentStatus.pipeline_status === 'running' && status.pipeline_status === 'completed') {
                    this.showNotification('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else if (this.currentStatus.pipeline_status === 'running' && status.pipeline_status === 'error') {
                    this.showNotification('‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 'error');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
            const statusElement = document.getElementById('pipeline-status');
            if (statusElement) {
                const statusInfo = this.getStatusInfo(status.pipeline_status);
                statusElement.innerHTML = `<i class="bi ${statusInfo.icon}"></i> ${statusInfo.text}`;
                statusElement.className = `badge ${statusInfo.class} ${statusInfo.animation}`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.updateControlButtons(status.pipeline_status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
            this.updateConfigInfo(status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.updateTimeInfo(status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
            this.updateCurrentStage(status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞
            this.updatePipelineStats(status);
            
            // –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–æ–≤ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞"
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
        }
    }
    
    getStatusInfo(status) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ status –Ω–µ undefined –∏–ª–∏ null
        if (!status) {
            return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: 'bg-secondary', icon: 'bi-question-circle-fill', animation: '' };
        }
        
        const statusMap = {
            'idle': { 
                text: '–ì–æ—Ç–æ–≤', 
                class: 'bg-success', 
                icon: 'bi-circle-fill',
                animation: ''
            },
            'running': { 
                text: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', 
                class: 'bg-warning', 
                icon: 'bi-arrow-clockwise',
                animation: 'pulse'
            },
            'completed': { 
                text: '–ó–∞–≤–µ—Ä—à–µ–Ω', 
                class: 'bg-info', 
                icon: 'bi-check-circle-fill',
                animation: ''
            },
            'error': { 
                text: '–û—à–∏–±–∫–∞', 
                class: 'bg-danger', 
                icon: 'bi-exclamation-triangle-fill',
                animation: ''
            },
            // –°—Ç–∞—Ç—É—Å "paused" —É–¥–∞–ª–µ–Ω
        };
        return statusMap[status] || { text: status.toString().toUpperCase(), class: 'bg-secondary', icon: 'bi-question-circle-fill', animation: '' };
    }
    
    updateControlButtons(status) {
        try {
            const startBtn = document.getElementById('start-btn');
            const stopBtn = document.getElementById('stop-btn');
            
            if (startBtn && stopBtn) {
                if (status === 'running') {
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                } else {
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    updateConfigInfo(status) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ status –Ω–µ undefined
            if (!status) {
                console.warn('‚ùå –ü–æ–ª—É—á–µ–Ω undefined status –≤ updateConfigInfo');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
            const autoModeElement = document.getElementById('config-auto-mode');
            const intervalElement = document.getElementById('config-interval');
            const sourcesElement = document.getElementById('config-sources');
            const stagesElement = document.getElementById('config-stages');
            
            if (autoModeElement) {
                autoModeElement.className = status.is_auto_mode ? 'badge bg-success' : 'badge bg-danger';
                autoModeElement.innerHTML = status.is_auto_mode ? '<i class="bi bi-check-circle"></i> –í–∫–ª—é—á–µ–Ω' : '<i class="bi bi-x-circle"></i> –û—Ç–∫–ª—é—á–µ–Ω';
            }
            
            if (intervalElement) {
                intervalElement.className = 'badge bg-primary';
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ —á–∞—Å–∞, –∏–Ω–∞—á–µ —á–∞—Å—ã
                if (status.interval_minutes && status.interval_minutes < 60) {
                    intervalElement.innerHTML = `<i class="bi bi-clock"></i> ${status.interval_minutes} –º–∏–Ω.`;
                } else {
                    intervalElement.innerHTML = `<i class="bi bi-clock"></i> ${status.interval_hours} —á–∞—Å.`;
                }
            }
            
            if (sourcesElement) {
                sourcesElement.className = 'badge bg-info';
                const sourcesText = status.scraping_sources ? status.scraping_sources.join(', ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                sourcesElement.innerHTML = `<i class="bi bi-list"></i> ${sourcesText}`;
            }
            
            if (stagesElement && status.enabled_stages) {
                stagesElement.innerHTML = '';
                const stageNames = {
                    'scraping': '–ü–∞—Ä—Å–∏–Ω–≥',
                    'photo_processing': '–§–æ—Ç–æ',
                    'duplicate_processing': '–î—É–±–ª–∏–∫–∞—Ç—ã',
                    'realtor_detection': '–†–∏—ç–ª—Ç–æ—Ä—ã',
                    'elasticsearch_reindex': '–ü–æ–∏—Å–∫'
                };
                
                Object.entries(status.enabled_stages).forEach(([stageKey, enabled]) => {
                    const stageBadge = document.createElement('span');
                    stageBadge.className = `badge ${enabled ? 'bg-success' : 'bg-secondary'} me-1`;
                    stageBadge.innerHTML = `
                        <i class="bi ${enabled ? 'bi-check-circle' : 'bi-x-circle'}"></i>
                        ${stageNames[stageKey] || stageKey}
                    `;
                    stagesElement.appendChild(stageBadge);
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }
    
    updateTimeInfo(status) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ status –Ω–µ undefined
            if (!status) {
                console.warn('‚ùå –ü–æ–ª—É—á–µ–Ω undefined status –≤ updateTimeInfo');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            const lastRunStartElement = document.getElementById('last-run-start');
            const lastRunEndElement = document.getElementById('last-run-end');
            const nextRunElement = document.getElementById('next-run');
            
            if (lastRunStartElement) {
                if (status.last_run_start) {
                    lastRunStartElement.textContent = this.formatDateTime(status.last_run_start);
                    lastRunStartElement.className = 'text-success';
                } else {
                    lastRunStartElement.textContent = '‚Äî';
                    lastRunStartElement.className = 'text-muted';
                }
            }
            
            if (lastRunEndElement) {
                if (status.last_run_end) {
                    lastRunEndElement.textContent = this.formatDateTime(status.last_run_end);
                    lastRunEndElement.className = 'text-info';
                } else {
                    lastRunEndElement.textContent = '‚Äî';
                    lastRunEndElement.className = 'text-muted';
                }
            }
            
            if (nextRunElement) {
                if (status.next_run_scheduled && status.is_auto_mode) {
                    nextRunElement.textContent = this.formatDateTime(status.next_run_scheduled);
                    nextRunElement.className = 'text-primary';
                } else {
                    nextRunElement.textContent = '‚Äî';
                    nextRunElement.className = 'text-muted';
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        }
    }
    
    updateCurrentStage(status) {
        try {
            const currentStageElement = document.getElementById('current-stage');
            const currentStageNameElement = document.getElementById('current-stage-name');
            const currentProgressElement = document.getElementById('current-progress');
            const currentStageDetailsElement = document.getElementById('current-stage-details');
            
            if (!currentStageElement || !currentStageNameElement) return;
            
            if (status.current_stage && status.pipeline_status === 'running') {
                const stageNames = {
                    'scraping': '–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤',
                    'photo_processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                    'duplicate_processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
                    'realtor_detection': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤',
                    'elasticsearch_reindex': '–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞'
                };
                
                const stageName = stageNames[status.current_stage] || status.current_stage;
                currentStageNameElement.textContent = stageName;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
                currentStageElement.style.display = 'block';
                
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if (currentProgressElement) {
                    currentProgressElement.parentElement.style.display = 'none';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞
                if (currentStageDetailsElement) {
                    const stageDetails = status.stage_details?.[status.current_stage];
                    if (stageDetails) {
                        let detailsText = '';
                        if (stageDetails.status === 'running') {
                            detailsText = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
                        } else if (stageDetails.status === 'completed') {
                            detailsText = '–ó–∞–≤–µ—Ä—à–µ–Ω';
                        } else if (stageDetails.status === 'error') {
                            detailsText = `–û—à–∏–±–∫–∞: ${stageDetails.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                        }
                        currentStageDetailsElement.textContent = detailsText;
                    }
                }
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
                currentStageElement.style.display = 'none';
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞:', error);
        }
    }
    
    updatePipelineStats(status) {
        try {
            // –£–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            // –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞:', error);
        }
    }
    
    updateSimpleStats(status) {
        try {
            // –£–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            // –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    
    getProgressText(stageKey, stageInfo) {
        switch (stageKey) {
            case 'scraping':
                return `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stageInfo.processed || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`;
            case 'photo_processing':
                return `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stageInfo.processed || 0} —Ñ–æ—Ç–æ`;
            case 'duplicate_processing':
                return `–ù–∞–π–¥–µ–Ω–æ: ${stageInfo.duplicates || 0} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`;
            case 'realtor_detection':
                return `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${stageInfo.realtors || 0} —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤`;
            case 'elasticsearch_reindex':
                return `–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${stageInfo.indexed || 0} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`;
            default:
                return `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${stageInfo.progress || 0}%`;
        }
    }
    
    formatDateTime(dateString) {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const date = new Date(dateString);
        return date.toLocaleString('ru-RU');
    }
    
    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.showNotification) {
            window.showNotification(type, message);
        } else {
            // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            window.activeNotifications = window.activeNotifications || new Set();
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            const notificationKey = `${type}:${message}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.activeNotifications.has(notificationKey)) {
                console.log('–î—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (automation.js):', message);
                return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            window.activeNotifications.add(notificationKey);
            
            const alertClass = type === 'error' ? 'danger' : type;
            const notificationId = 'notification-' + Date.now() + Math.random().toString(36).substr(2, 9);
            
            const alertHtml = `
                <div id="${notificationId}" class="alert alert-${alertClass} alert-dismissible fade show position-fixed notification-alert" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 400px;" 
                     role="alert" data-notification-key="${notificationKey}">
            ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            const notificationElement = document.getElementById(notificationId);
            if (notificationElement) {
                const closeButton = notificationElement.querySelector('.btn-close');
                if (closeButton) {
                    closeButton.addEventListener('click', () => {
                        window.activeNotifications.delete(notificationKey);
                    });
                }
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                const notification = document.getElementById(notificationId);
                if (notification) {
                    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                    window.activeNotifications.delete(notificationKey);
                    
                    notification.style.transform = 'translateX(100%)';
                    notification.style.opacity = '0';
                    setTimeout(() => {
                        notification.remove();
                    }, 300);
                }
            }, 5000);
        }
    }
    
    async loadScrapingSources() {
        try {
            const response = await fetch('/api/scraping/sources');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            this.updateScrapingSources(data.jobs || [], data.sources || []);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const container = document.getElementById('scraping-sources');
            if (container) {
                container.innerHTML = `
                    <div class="col-12 text-center">
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i>
                            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}
                        </div>
                    </div>
                `;
            }
        }
    }
    
    updateScrapingSources(jobs, sources) {
        try {
            const container = document.getElementById('scraping-sources');
            if (!container) {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç scraping-sources –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            container.innerHTML = '';
            
            if (!sources || sources.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center">
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        </div>
                    </div>
                `;
                return;
            }
            
            sources.forEach(source => {
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                const sourceJobs = jobs.filter(j => j.config === source);
                let latestJob = null;
                
                if (sourceJobs.length > 0) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
                    sourceJobs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                    latestJob = sourceJobs[0];
                }
                
                const sourceCard = this.createSourceCard(source, latestJob);
                container.appendChild(sourceCard);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        }
    }
    
    createSourceCard(source, job) {
        try {
            const card = document.createElement('div');
            card.className = 'col-md-6 col-lg-4 mb-3';
                
            let status = 'idle';
            let statusClass = 'bg-secondary';
            let statusIcon = 'bi-circle-fill';
            let statusText = '–ù–µ –∑–∞–ø—É—â–µ–Ω';
            let animation = '';
                
            if (job) {
                status = job.status;
                switch (job.status) {
                    case '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è':
                        statusClass = 'bg-warning';
                        statusIcon = 'bi-arrow-clockwise';
                        statusText = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
                        animation = 'pulse';
                        break;
                    case '–∑–∞–≤–µ—Ä—à–µ–Ω–æ':
                        statusClass = 'bg-success';
                        statusIcon = 'bi-check-circle-fill';
                        statusText = '–ó–∞–≤–µ—Ä—à–µ–Ω';
                        break;
                    case '–æ—à–∏–±–∫–∞':
                        statusClass = 'bg-danger';
                        statusIcon = 'bi-exclamation-triangle-fill';
                        statusText = '–û—à–∏–±–∫–∞';
                        break;
                    case '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ':
                        statusClass = 'bg-info';
                        statusIcon = 'bi-stop-circle-fill';
                        statusText = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                        break;
                    case 'pending':
                        statusClass = 'bg-primary';
                        statusIcon = 'bi-hourglass-split';
                        statusText = '–û–∂–∏–¥–∞–µ—Ç';
                        break;
                    default:
                        statusClass = 'bg-secondary';
                        statusIcon = 'bi-question-circle-fill';
                        statusText = job.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                }
            }
            
            card.innerHTML = `
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="card-title mb-0">${source}</h6>
                            <span class="badge ${statusClass} ${animation}">
                                <i class="bi ${statusIcon}"></i> ${statusText}
                            </span>
                        </div>
                        
                        ${job ? `
                            <small class="text-muted">
                                –°–æ–∑–¥–∞–Ω: ${this.formatDateTime(job.created_at)}<br>
                                ${job.started_at ? `–ó–∞–ø—É—â–µ–Ω: ${this.formatDateTime(job.started_at)}<br>` : ''}
                                ${job.finished_at ? `–ó–∞–≤–µ—Ä—à–µ–Ω: ${this.formatDateTime(job.finished_at)}` : ''}
                            </small>
                        ` : '<small class="text-muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</small>'}
                    </div>
                    
                    <div class="card-footer bg-transparent">
                        <div class="btn-group btn-group-sm w-100">
                            ${!job || job.status !== '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' ? 
                                `<button class="btn btn-outline-primary" onclick="automationManager.startSource('${source}')">
                                    <i class="bi bi-play"></i> –ó–∞–ø—É—Å—Ç–∏—Ç—å
                                </button>` : ''
                            }
                            
                            ${job && job.status === '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' ? 
                                `<button class="btn btn-outline-danger" onclick="automationManager.stopSource('${source}', '${job.id}')">
                                    <i class="bi bi-stop"></i> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                </button>` : ''
                            }
                            
                            <button class="btn btn-outline-secondary" onclick="automationManager.showSourceLogs('${source}')">
                                <i class="bi bi-file-text"></i> –õ–æ–≥–∏
                            </button>
                        </div>
                    </div>
                </div>
            `;
                
            return card;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ—à–∏–±–∫–æ–π
            const errorCard = document.createElement('div');
            errorCard.className = 'col-md-6 col-lg-4 mb-3';
            errorCard.innerHTML = `
                <div class="card h-100">
                    <div class="card-body text-center">
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i>
                            –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ${source}
                        </div>
                    </div>
                </div>
            `;
            return errorCard;
        }
    }
    
    async startSource(source) {
        try {
            const response = await fetch(`/api/scraping/start/${source}`, {
                method: 'POST'
            });
            
            const result = await response.json();
            
            if (response.ok) {
                console.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ ${source} –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ API`);
                setTimeout(() => this.loadScrapingSources(), 1000);
            } else {
                this.showNotification(result.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', 'error');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'error');
            console.error('Error starting source:', error);
        }
    }
    
    async stopSource(source, jobId) {
        try {
            const response = await fetch(`/api/scraping/stop/${jobId}`, {
                method: 'POST'
            });
            
            if (response.ok) {
                this.showNotification(`üõë –ü–∞—Ä—Å–∏–Ω–≥ ${source} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'info');
                setTimeout(() => this.loadScrapingSources(), 1000);
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'error');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'error');
            console.error('Error stopping source:', error);
        }
    }
    
    async startAllSources() {
        try {
            const response = await fetch('/api/scraping/start-all', {
                method: 'POST'
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('üöÄ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã!', 'success');
                setTimeout(() => this.loadScrapingSources(), 1000);
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', 'error');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            console.error('Error starting all sources:', error);
        }
    }
    
    async stopAllSources() {
        try {
            const response = await fetch('/api/scraping/stop-all', {
                method: 'POST'
            });
            
            if (response.ok) {
                this.showNotification('üõë –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
                setTimeout(() => this.loadScrapingSources(), 1000);
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            }
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            console.error('Error stopping all sources:', error);
            }
    }
    
    async showSourceLogs(source) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ job_id –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            const jobsResponse = await fetch('/api/scraping/jobs');
            const jobsData = await jobsResponse.json();
            
            // –ò—â–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–¥–∞—á—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            const sourceJobs = jobsData.filter(j => j.config === source);
            const job = sourceJobs.sort((a, b) => {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è –ø–µ—Ä–≤–∞—è)
                const dateA = new Date(a.created_at || 0);
                const dateB = new Date(b.created_at || 0);
                return dateB - dateA;
            })[0];
            
            if (!job) {
                this.showNotification('‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞', 'error');
                return;
            }
            
            console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è ${source} (job_id: ${job.id}, —Å—Ç–∞—Ç—É—Å: ${job.status})`);
            
            const response = await fetch(`/api/scraping/log/${job.id}`);
            const logs = await response.json();
            
            const modal = new bootstrap.Modal(document.getElementById('logsModal'));
            const modalBody = document.getElementById('logsModalBody');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
            modalBody.innerHTML = `
                <div class="log-header mb-3">
                    <h6>–õ–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${source}</h6>
                    <small class="text-muted">
                        ID: ${job.id} | –°—Ç–∞—Ç—É—Å: ${job.status} | 
                        –°–æ–∑–¥–∞–Ω–æ: ${this.formatDateTime(job.created_at)}
                    </small>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
            modalBody.innerHTML += logs.log.map(logLine => {
                // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp, level –∏ message
                const logMatch = logLine.match(/^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(\w+)\] (.+)$/);
                if (logMatch) {
                    const [, timestamp, level, message] = logMatch;
                    return `<div class="log-entry">
                        <small class="log-timestamp">${timestamp}</small>
                        <span class="log-level log-${level.toLowerCase()}">${level.toUpperCase()}</span>
                        <span class="log-message">${message}</span>
                    </div>`;
                } else {
                    return `<div class="log-entry">
                        <span class="log-message">${logLine}</span>
                    </div>`;
                }
            }).join('');
            
            modal.show();
        } catch (error) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤', 'error');
            console.error('Error loading logs:', error);
        }
    }
    
    destroy() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç WebSocket —Å–æ–±—ã—Ç–∏–π
        if (window.realtimeClient) {
            window.realtimeClient.off('automation_status_update', this.handleStatusUpdate);
            window.realtimeClient.off('automation_completed', this.handleCompleted);
            window.realtimeClient.off('automation_error', this.handleError);
            window.realtimeClient.off('scraping_sources_update', this.handleScrapingSourcesUpdate);
        }
    }

    startAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.refreshInterval = setInterval(() => {
            this.loadStatus();
            this.loadScrapingSources();
        }, 2000);
    }

    setupWebSocketHandlers() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞
        setTimeout(() => {
            if (window.realtimeClient) {
            window.realtimeClient.on('automation_status', (data) => {
                this.currentStatus = data;
                this.updateUI(data);
            });

                window.realtimeClient.on('automation_completed', (data) => {
                    this.showNotification('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                    this.loadStatus();
                });

                window.realtimeClient.on('automation_error', (data) => {
                    this.showNotification('‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 'error');
                    this.loadStatus();
                });

            window.realtimeClient.on('automation_progress', (data) => {
                if (data.status) {
                    this.currentStatus = data.status;
                    this.updateUI(data.status);
                }
            });

            window.realtimeClient.on('scraping_started', (data) => {
                    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - websocket.js —É–∂–µ –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ
                    console.log('üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (WebSocket event)');
                this.loadScrapingSources();
            });

            window.realtimeClient.on('scraping_completed', (data) => {
                    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - websocket.js —É–∂–µ –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ
                    console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (WebSocket event)');
                this.loadScrapingSources();
            });

            window.realtimeClient.on('scraping_sources_update', (data) => {
                this.loadScrapingSources();
            });
            } else {
                console.warn('‚ö†Ô∏è WebSocket client –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ polling');
            }
        }, 100);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let automationManager = null;

document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('automation-page')) {
        automationManager = new AutomationManager();
        window.automationManager = automationManager;
    }
});