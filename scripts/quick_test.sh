#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ

echo "‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export PYTHONPATH=/home/aetheriw/Downloads/estate_parser/backend:/home/aetheriw/Downloads/estate_parser/scraper
export REDIS_HOST=localhost
export REDIS_PORT=6379
export SCRAPY_API_URL=http://localhost:8000/api/ads

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è backend
test_backend() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º backend..."
    cd backend
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã backend..."
    python3 -c "
try:
    from app.main import app
    from app.services.ai_data_extractor import AIDataExtractor
    print('‚úÖ Backend –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ backend: {e}')
"
    
    cd ..
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è scraper
test_scraper() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º scraper..."
    cd scraper/estate_scraper
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã scraper..."
    python3 -c "
import sys
sys.path.append('/home/aetheriw/Downloads/estate_parser/backend')
try:
    from app.services.ai_data_extractor import AIDataExtractor
    from real_estate_scraper.spiders.generic_spider import GenericSpider
    from real_estate_scraper.pipelines import DatabasePipeline
    print('‚úÖ Scraper –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç')
    print('‚úÖ AI –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ scraper: {e}')
"
    
    cd ../..
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –º–æ–¥—É–ª—è
test_ai_module() {
    echo "ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –º–æ–¥—É–ª—å..."
    cd backend
    
    python3 -c "
from app.services.ai_data_extractor import AIDataExtractor
import asyncio

async def test_ai():
    try:
        extractor = AIDataExtractor()
        print('‚úÖ AI Data Extractor —Å–æ–∑–¥–∞–Ω')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        result = extractor.extract_and_classify(
            title='–ü—Ä–æ–¥–∞–µ—Ç—Å—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
            description='–ö—Ä–∞—Å–∏–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º, –º–µ–±–µ–ª—å—é, 50–º¬≤',
            existing_data={}
        )
        print(f'‚úÖ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ AI –º–æ–¥—É–ª—è: {e}')

asyncio.run(test_ai())
"
    
    cd ..
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-all}" in
    "backend")
        test_backend
        ;;
    "scraper")
        test_scraper
        ;;
    "ai")
        test_ai_module
        ;;
    "all"|*)
        test_backend
        echo ""
        test_scraper
        echo ""
        test_ai_module
        echo ""
        echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
        ;;
esac 