services:
  # База данных PostgreSQL
  db:
    image: postgres:15
    container_name: estate_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - estate_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: estate_redis
    ports:
      - "${REDIS_EXTERNAL_PORT}:6379"
    networks:
      - estate_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch для поиска
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: estate_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS}"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_EXTERNAL_PORT}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT}:9300"
    networks:
      - estate_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PgAdmin для управления БД
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: estate_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - estate_network

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: estate_api
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX}
      - SCRAPY_API_URL=${SCRAPY_API_URL}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
    ports:
      - "${API_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - estate_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Scraper сервис
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: estate_scraper
    environment:
      - SCRAPY_API_URL=${SCRAPY_API_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./backend:/app/backend
    networks:
      - estate_network
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'python.*worker.py' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


volumes:
  postgres_data:
  elasticsearch_data:

networks:
  estate_network:
    driver: bridge