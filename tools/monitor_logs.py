#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import time
import argparse
import glob
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    ENDC = '\033[0m'  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

class LogMonitor(FileSystemEventHandler):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, log_dir="logs/scraping", follow_new=True, show_errors_only=False):
        self.log_dir = log_dir
        self.follow_new = follow_new
        self.show_errors_only = show_errors_only
        self.watched_files = {}
        self.last_positions = {}
        
        print(f"{Colors.CYAN}üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤: {log_dir}{Colors.ENDC}")
        print(f"{Colors.YELLOW}‚öôÔ∏è –†–µ–∂–∏–º: {'—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏' if show_errors_only else '–≤—Å–µ –ª–æ–≥–∏'}{Colors.ENDC}")
        print("-" * 70)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏
        self.check_existing_logs()
        
        if self.follow_new:
            # –°–ª–µ–¥–∏–º –∑–∞ –Ω–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            observer = Observer()
            observer.schedule(self, self.log_dir, recursive=True)
            observer.start()
            
            try:
                print(f"{Colors.GREEN}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏{Colors.ENDC}")
                while True:
                    time.sleep(1)
                    self.check_file_updates()
            except KeyboardInterrupt:
                print(f"\n{Colors.YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...{Colors.ENDC}")
                observer.stop()
            observer.join()
        else:
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.check_file_updates()
    
    def check_existing_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–æ–≤"""
        if not os.path.exists(self.log_dir):
            print(f"{Colors.RED}‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.log_dir}{Colors.ENDC}")
            print(f"{Colors.YELLOW}üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã{Colors.ENDC}")
            return
        
        log_files = glob.glob(f"{self.log_dir}/*.log")
        if not log_files:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.log_dir}{Colors.ENDC}")
            print(f"{Colors.CYAN}üí° –õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞{Colors.ENDC}")
        else:
            print(f"{Colors.GREEN}üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}{Colors.ENDC}")
            for log_file in sorted(log_files):
                filename = os.path.basename(log_file)
                size = os.path.getsize(log_file)
                mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
                print(f"   üìÑ {filename} ({size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: {mtime.strftime('%H:%M:%S')})")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
                self.watched_files[log_file] = True
                self.last_positions[log_file] = 0
    
    def check_file_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö"""
        for log_file in list(self.watched_files.keys()):
            if os.path.exists(log_file):
                self.read_new_lines(log_file)
    
    def read_new_lines(self, filepath):
        """–ß–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            current_size = os.path.getsize(filepath)
            last_pos = self.last_positions.get(filepath, 0)
            
            if current_size > last_pos:
                with open(filepath, 'r', encoding='utf-8') as f:
                    f.seek(last_pos)
                    new_lines = f.readlines()
                    
                    for line in new_lines:
                        line = line.strip()
                        if line:
                            self.format_and_print_line(line, filepath)
                    
                    self.last_positions[filepath] = f.tell()
                    
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}{Colors.ENDC}")
    
    def format_and_print_line(self, line, filepath):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
        filename = os.path.basename(filepath)
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.show_errors_only:
            if not any(level in line for level in ['ERROR', 'CRITICAL', '‚ùå', 'üö´', 'üí•']):
                return
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
        color = Colors.WHITE
        prefix = "üìù"
        
        if any(keyword in line for keyword in ['ERROR', 'CRITICAL', '‚ùå', 'üö´', 'üí•']):
            color = Colors.RED
            prefix = "üö®"
        elif any(keyword in line for keyword in ['WARNING', '‚ö†Ô∏è']):
            color = Colors.YELLOW
            prefix = "‚ö†Ô∏è"
        elif any(keyword in line for keyword in ['SUCCESS', '‚úÖ', 'üéâ']):
            color = Colors.GREEN
            prefix = "‚úÖ"
        elif any(keyword in line for keyword in ['INFO', 'üöÄ', 'üìä', 'üìã']):
            color = Colors.CYAN
            prefix = "‚ÑπÔ∏è"
        elif any(keyword in line for keyword in ['DEBUG', 'üîç']):
            color = Colors.PURPLE
            prefix = "üîç"
        
        # –í—ã–≤–æ–¥–∏–º —Å —Ü–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∫–æ–π —Ñ–∞–π–ª–∞
        print(f"{Colors.BLUE}[{timestamp}]{Colors.ENDC} {Colors.BOLD}[{filename}]{Colors.ENDC} {prefix} {color}{line}{Colors.ENDC}")
    
    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
        
        if event.src_path.endswith('.log'):
            print(f"{Colors.GREEN}üìÅ –ù–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {os.path.basename(event.src_path)}{Colors.ENDC}")
            self.watched_files[event.src_path] = True
            self.last_positions[event.src_path] = 0
    
    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
        
        if event.src_path.endswith('.log') and event.src_path in self.watched_files:
            self.read_new_lines(event.src_path)

def main():
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    parser.add_argument(
        "--dir", 
        default="logs/scraping", 
        help="–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: logs/scraping)"
    )
    parser.add_argument(
        "--errors-only", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    )
    parser.add_argument(
        "--no-follow", 
        action="store_true", 
        help="–ù–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
    )
    
    args = parser.parse_args()
    
    print(f"{Colors.BOLD}{Colors.CYAN}üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏{Colors.ENDC}")
    print(f"{Colors.CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Colors.ENDC}")
    
    monitor = LogMonitor(
        log_dir=args.dir,
        follow_new=not args.no_follow,
        show_errors_only=args.errors_only
    )
    
    monitor.start_monitoring()

if __name__ == "__main__":
    main() 