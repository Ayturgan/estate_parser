#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import sys
import os
import asyncio
import aiohttp
import json
from datetime import datetime

async def test_normalization():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    def normalize_listing_type(listing_type: str) -> str:
        if not listing_type:
            return None
        value = listing_type.strip().lower()
        if value in ["–ø—Ä–æ–¥–∞–∂–∞", "–ø—Ä–æ–¥–∞—ë—Ç—Å—è", "–ø—Ä–æ–¥–∞–µ—Ç—Å—è", "sell", "sale"]:
            return "–ø—Ä–æ–¥–∞–∂–∞"
        if value in ["–∞—Ä–µ–Ω–¥–∞", "—Å–¥–∞—á–∞", "—Å–¥–∞–µ—Ç—Å—è", "—Å–¥–∞—ë—Ç—Å—è", "rent", "lease"]:
            return "–∞—Ä–µ–Ω–¥–∞"
        return value
    
    test_cases = [
        ("–ü—Ä–æ–¥–∞–∂–∞", "–ø—Ä–æ–¥–∞–∂–∞"),
        ("–ø—Ä–æ–¥–∞—ë—Ç—Å—è", "–ø—Ä–æ–¥–∞–∂–∞"),
        ("–ø—Ä–æ–¥–∞–µ—Ç—Å—è", "–ø—Ä–æ–¥–∞–∂–∞"),
        ("sale", "–ø—Ä–æ–¥–∞–∂–∞"),
        ("–∞—Ä–µ–Ω–¥–∞", "–∞—Ä–µ–Ω–¥–∞"),
        ("—Å–¥–∞—á–∞", "–∞—Ä–µ–Ω–¥–∞"),
        ("—Å–¥–∞–µ—Ç—Å—è", "–∞—Ä–µ–Ω–¥–∞"),
        ("rent", "–∞—Ä–µ–Ω–¥–∞"),
        ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        ("", None),
        (None, None)
    ]
    
    for input_val, expected in test_cases:
        result = normalize_listing_type(input_val)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{input_val}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
    
    print()

async def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        try:
            async with session.get("http://localhost:8000/api/status") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  ‚úÖ API —Å—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
                    print(f"  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {data.get('total_unique_ads', 0)}")
                    print(f"  üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {data.get('total_ads', 0)}")
                else:
                    print(f"  ‚ùå API —Å—Ç–∞—Ç—É—Å: HTTP {response.status}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            async with session.get("http://localhost:8000/api/stats") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  üìä –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {data.get('total_duplicates', 0)}")
                    print(f"  üìä –†–∏—ç–ª—Ç–æ—Ä—Å–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {data.get('realtor_ads', 0)}")
                    print(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {data.get('deduplication_ratio', 0):.1f}%")
                else:
                    print(f"  ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: HTTP {response.status}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print()

async def test_duplicate_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        try:
            async with session.get("http://localhost:8000/api/process/duplicates/status") as response:
                if response.status == 200:
                    data = await response.json()
                    status = data.get('status', 'unknown')
                    print(f"  üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {status}")
                    
                    if status == 'idle':
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                        async with session.post("http://localhost:8000/api/process/duplicates") as post_response:
                            if post_response.status in [200, 201, 202]:
                                print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
                                
                                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                max_wait = 30  # —Å–µ–∫—É–Ω–¥
                                for i in range(max_wait):
                                    await asyncio.sleep(2)
                                    
                                    async with session.get("http://localhost:8000/api/process/duplicates/status") as status_response:
                                        if status_response.status == 200:
                                            status_data = await status_response.json()
                                            status = status_data.get('status', 'unknown')
                                            
                                            if status == 'completed':
                                                print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                                                break
                                            elif status == 'error':
                                                print("  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                                                break
                                            else:
                                                print(f"  ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {status}")
                                        else:
                                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {status_response.status}")
                                            break
                                else:
                                    print("  ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                            else:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: HTTP {post_response.status}")
                    else:
                        print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {status}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
    
    print()

async def test_realtor_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤...")
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        try:
            async with session.get("http://localhost:8000/api/process/realtors/status") as response:
                if response.status == 200:
                    data = await response.json()
                    status = data.get('status', 'unknown')
                    print(f"  üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤: {status}")
                    
                    if status == 'idle':
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤
                        async with session.post("http://localhost:8000/api/process/realtors/detect") as post_response:
                            if post_response.status in [200, 201, 202]:
                                print("  ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
                                
                                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                max_wait = 20  # —Å–µ–∫—É–Ω–¥
                                for i in range(max_wait):
                                    await asyncio.sleep(2)
                                    
                                    async with session.get("http://localhost:8000/api/process/realtors/status") as status_response:
                                        if status_response.status == 200:
                                            status_data = await status_response.json()
                                            status = status_data.get('status', 'unknown')
                                            
                                            if status == 'completed':
                                                print("  ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                                                break
                                            elif status == 'error':
                                                print("  ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤")
                                                break
                                            else:
                                                print(f"  ‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤: {status}")
                                        else:
                                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {status_response.status}")
                                            break
                                else:
                                    print("  ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤")
                            else:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤: HTTP {post_response.status}")
                    else:
                        print(f"  üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {status}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤: {e}")
    
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print("=" * 50)
    
    await test_normalization()
    await test_api_endpoints()
    await test_duplicate_processing()
    await test_realtor_detection()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 50)
    print("üìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print("  1. ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("  2. ‚úÖ Event loop –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print("  3. ‚úÖ –ü–æ—Ä–æ–≥–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–Ω–∏–∂–µ–Ω—ã")
    print("  4. ‚úÖ –ü–æ—ç—Ç–∞–ø–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 