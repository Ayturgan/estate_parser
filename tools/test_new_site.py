#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_new_site.py config_name [spider_type]
"""

import sys
import os
import subprocess
import json
from pathlib import Path

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_new_site.py config_name [spider_type]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_new_site.py my_site")
        print("  python test_new_site.py my_api_site api")
        print("  python test_new_site.py my_show_more_site show_more")
        sys.exit(1)
    
    config_name = sys.argv[1]
    spider_type = sys.argv[2] if len(sys.argv) > 2 else "html"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∞–π–¥–µ—Ä–∞
    spider_map = {
        "html": "generic_scraper",
        "api": "generic_api", 
        "show_more": "generic_show_more",
        "show_more_simple": "generic_show_more_simple"
    }
    
    if spider_type not in spider_map:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–∞–π–¥–µ—Ä–∞: {spider_type}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(spider_map.keys())}")
        sys.exit(1)
    
    spider_name = spider_map[spider_type]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    config_path = Path(f"scraper/estate_scraper/real_estate_scraper/configs/{config_name}.yml")
    if not config_path.exists():
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name}.yml –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print(f"–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: {config_path}")
        sys.exit(1)
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {config_name}")
    print(f"üï∑Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∞–π–¥–µ—Ä: {spider_name}")
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
    print("-" * 50)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é scraper
    os.chdir("scraper/estate_scraper")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    cmd = [
        "scrapy", "crawl", spider_name,
        "-a", f"config={config_name}",
        "-s", "LOG_LEVEL=INFO",
        "-s", "CLOSESPIDER_ITEMCOUNT=5",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
        "-o", f"test_output_{config_name}.json"
    ]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
    print("-" * 50)
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")
        
        if result.stdout:
            print("‚úÖ –í—ã–≤–æ–¥:")
            print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = f"test_output_{config_name}.json"
        if os.path.exists(output_file):
            with open(output_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"üìà –°–ø–∞—Ä—Å–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(data)}")
            
            if data:
                print("üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
                first_item = data[0]
                for key, value in first_item.items():
                    if value:
                        print(f"  {key}: {str(value)[:100]}{'...' if len(str(value)) > 100 else ''}")
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main() 