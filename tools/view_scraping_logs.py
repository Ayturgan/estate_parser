#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import os
import json
import glob
import sys
from datetime import datetime
import argparse

def list_log_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    log_dir = "/app/logs/scraping"
    if not os.path.exists(log_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {log_dir}")
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    log_files = glob.glob(os.path.join(log_dir, "scraping_*"))
    if not log_files:
        print("üìÅ –õ–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ job_id
    jobs = {}
    for file_path in log_files:
        filename = os.path.basename(file_path)
        if filename.startswith("scraping_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º job_id –∏ config_name
            parts = filename.replace("scraping_", "").split("_")
            if len(parts) >= 2:
                job_id = parts[0]
                config_name = parts[1].split(".")[0]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                
                if job_id not in jobs:
                    jobs[job_id] = {
                        'job_id': job_id,
                        'config_name': config_name,
                        'files': []
                    }
                jobs[job_id]['files'].append(file_path)
    
    return list(jobs.values())

def show_job_stats(job_id, config_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    stats_file = f"/app/logs/scraping/scraping_{job_id}_{config_name}_stats.json"
    
    if not os.path.exists(stats_file):
        print(f"‚ùå –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {stats_file}")
        return False
    
    try:
        with open(stats_file, 'r', encoding='utf-8') as f:
            stats = json.load(f)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß–ò {job_id}")
        print("=" * 50)
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥: {stats.get('config_name', 'N/A')}")
        print(f"üïê –°—Ç–∞—Ä—Ç: {stats.get('started_at', 'N/A')}")
        print(f"üèÅ –§–∏–Ω–∏—à: {stats.get('finished_at', 'N/A')}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {stats.get('status', 'N/A').upper()}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if stats.get('started_at') and stats.get('finished_at'):
            try:
                start = datetime.fromisoformat(stats['started_at'])
                end = datetime.fromisoformat(stats['finished_at'])
                duration = end - start
                print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
            except:
                print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: N/A")
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('pages_processed', 0)}")
        print(f"   üè† –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {stats.get('items_total', 0)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('items_processed', 0)}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('items_failed', 0)}")
        print(f"   üì° API –≤—ã–∑–æ–≤–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö: {stats.get('api_calls_success', 0)}")
        print(f"   üö´ API –≤—ã–∑–æ–≤–æ–≤ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö: {stats.get('api_calls_failed', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        errors = stats.get('errors', [])
        if errors:
            print(f"\nüí• –û–®–ò–ë–ö–ò ({len(errors)}):")
            for i, error in enumerate(errors[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i}. {error.get('message', 'Unknown error')}")
                if error.get('context'):
                    print(f"      –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error['context']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = stats.get('warnings', [])
        if warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(warnings)}):")
            for i, warning in enumerate(warnings[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i}. {warning.get('message', 'Unknown warning')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def show_log_content(job_id, config_name, log_type="main", lines=50):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞"""
    log_files = {
        'main': f"/app/logs/scraping/scraping_{job_id}_{config_name}.log",
        'errors': f"/app/logs/scraping/scraping_{job_id}_{config_name}_errors.log",
        'stats': f"/app/logs/scraping/scraping_{job_id}_{config_name}_stats.json"
    }
    
    log_file = log_files.get(log_type)
    if not log_file or not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return False
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.readlines()
        
        print(f"\nüìÑ –õ–û–ì: {os.path.basename(log_file)}")
        print("=" * 50)
        
        if log_type == 'stats':
            # –î–ª—è JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
            with open(log_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(json.dumps(data, ensure_ascii=False, indent=2))
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
            start_line = max(0, len(content) - lines)
            for line_num, line in enumerate(content[start_line:], start_line + 1):
                print(f"{line_num:4d}: {line.rstrip()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    parser.add_argument('--list', '-l', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á')
    parser.add_argument('--job', '-j', help='ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
    parser.add_argument('--config', '-c', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument('--type', '-t', choices=['main', 'errors', 'stats'], default='main', 
                       help='–¢–∏–ø –ª–æ–≥–∞ (main/errors/stats)')
    parser.add_argument('--lines', '-n', type=int, default=50, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('--stats', '-s', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    if len(sys.argv) == 1:
        args.list = True
    
    if args.list:
        print("üìã –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        
        jobs = list_log_files()
        if not jobs:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        for job in sorted(jobs, key=lambda x: os.path.getctime(x['files'][0]), reverse=True):
            job_id = job['job_id']
            config_name = job['config_name']
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_file = f"/app/logs/scraping/scraping_{job_id}_{config_name}_stats.json"
            status = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            duration = "N/A"
            items_processed = "N/A"
            
            if os.path.exists(stats_file):
                try:
                    with open(stats_file, 'r', encoding='utf-8') as f:
                        stats = json.load(f)
                    status = stats.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                    items_processed = stats.get('items_processed', 0)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    if stats.get('started_at') and stats.get('finished_at'):
                        try:
                            start = datetime.fromisoformat(stats['started_at'])
                            end = datetime.fromisoformat(stats['finished_at'])
                            duration = str(end - start).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                        except:
                            pass
                except:
                    pass
            
            print(f"üîπ {job_id} | {config_name} | {status} | {duration} | {items_processed} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        print(f"\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: python {sys.argv[0]} -j <job_id>")
        return
    
    if args.job:
        # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ job_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not args.config:
            jobs = list_log_files()
            matching_jobs = [j for j in jobs if j['job_id'] == args.job]
            if not matching_jobs:
                print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {args.job} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            args.config = matching_jobs[0]['config_name']
        
        if args.stats:
            show_job_stats(args.job, args.config)
        else:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            show_job_stats(args.job, args.config)
            
            # –ó–∞—Ç–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞
            print(f"\n" + "=" * 50)
            show_log_content(args.job, args.config, args.type, args.lines)
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é --job –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

if __name__ == "__main__":
    main() 