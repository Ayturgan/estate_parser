#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
os.environ['DATABASE_URL'] = "postgresql://estate_user:admin123@localhost:5432/estate_db"
os.environ['DB_HOST'] = "localhost"
os.environ['DB_PORT'] = "5432"
os.environ['DB_NAME'] = "estate_db"
os.environ['DB_USER'] = "estate_user"
os.environ['DB_PASSWORD'] = "admin123"

from app.database import SessionLocal
from app.database import db_models
from app.services.ai_data_extractor import AIDataExtractor
from app.utils.duplicate_processor import DuplicateProcessor
from app.services.photo_service import PhotoService
from sqlalchemy import func
import json

async def test_ai_pipeline_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    try:
        ai_extractor = AIDataExtractor()
        print("‚úÖ AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        total_ads = db.query(func.count(db_models.DBAd.id)).scalar() or 0
        ads_with_area = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.area_sqm.isnot(None)
        ).scalar() or 0
        ads_with_rooms = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.rooms.isnot(None)
        ).scalar() or 0
        ads_with_heating = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.heating.isnot(None)
        ).scalar() or 0
        ads_with_furniture = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.furniture.isnot(None)
        ).scalar() or 0
        
        print(f"  –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_ads}")
        print(f"  –° –ø–ª–æ—â–∞–¥—å—é: {ads_with_area}/{total_ads} ({ads_with_area/total_ads*100:.1f}%)")
        print(f"  –° –∫–æ–º–Ω–∞—Ç–∞–º–∏: {ads_with_rooms}/{total_ads} ({ads_with_rooms/total_ads*100:.1f}%)")
        print(f"  –° –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º: {ads_with_heating}/{total_ads} ({ads_with_heating/total_ads*100:.1f}%)")
        print(f"  –° –º–µ–±–µ–ª—å—é: {ads_with_furniture}/{total_ads} ({ads_with_furniture/total_ads*100:.1f}%)")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        test_ads = db.query(db_models.DBAd).filter(
            db_models.DBAd.description.isnot(None)
        ).limit(3).all()
        
        for i, ad in enumerate(test_ads, 1):
            print(f"\n  –¢–µ—Å—Ç {i}/{len(test_ads)} - ID: {ad.id}")
            print(f"    –ó–∞–≥–æ–ª–æ–≤–æ–∫: {ad.title[:50] if ad.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            try:
                extracted_data = ai_extractor.extract_and_classify(
                    title=ad.title or "",
                    description=ad.description or "",
                    existing_data={}
                )
                
                print(f"    ‚úÖ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"      –ü–ª–æ—â–∞–¥—å: {extracted_data.get('area_sqm')} –º¬≤")
                print(f"      –ö–æ–º–Ω–∞—Ç—ã: {extracted_data.get('rooms')}")
                print(f"      –≠—Ç–∞–∂: {extracted_data.get('floor')}/{extracted_data.get('total_floors')}")
                print(f"      –û—Ç–æ–ø–ª–µ–Ω–∏–µ: {extracted_data.get('heating')}")
                print(f"      –ú–µ–±–µ–ª—å: {extracted_data.get('furniture')}")
                print(f"      –°–æ—Å—Ç–æ—è–Ω–∏–µ: {extracted_data.get('condition')}")
                print(f"      –ö–∞—á–µ—Å—Ç–≤–æ: {extracted_data.get('extraction_quality', 0):.2f}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if extracted_data.get('area_sqm'):
                    ad.area_sqm = extracted_data['area_sqm']
                if extracted_data.get('rooms'):
                    ad.rooms = extracted_data['rooms']
                if extracted_data.get('floor'):
                    ad.floor = extracted_data['floor']
                if extracted_data.get('total_floors'):
                    ad.total_floors = extracted_data['total_floors']
                if extracted_data.get('heating'):
                    ad.heating = extracted_data['heating']
                if extracted_data.get('furniture'):
                    ad.furniture = extracted_data['furniture']
                if extracted_data.get('condition'):
                    ad.condition = extracted_data['condition']
                if extracted_data.get('amenities'):
                    ad.amenities = json.dumps(extracted_data['amenities'])
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.commit()
            print(f"\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            db.rollback()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        try:
            processor = DuplicateProcessor(db)
            processed_count = processor.process_new_ads_batch(batch_size=5)
            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
        try:
            photo_service = PhotoService()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            for ad in test_ads:
                if ad.photos:
                    await photo_service.process_ad_photos(db, ad)
                    print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad.id}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        ads_with_area_after = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.area_sqm.isnot(None)
        ).scalar() or 0
        ads_with_rooms_after = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.rooms.isnot(None)
        ).scalar() or 0
        ads_with_heating_after = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.heating.isnot(None)
        ).scalar() or 0
        ads_with_furniture_after = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.furniture.isnot(None)
        ).scalar() or 0
        
        print(f"  –° –ø–ª–æ—â–∞–¥—å—é: {ads_with_area_after}/{total_ads} ({ads_with_area_after/total_ads*100:.1f}%)")
        print(f"  –° –∫–æ–º–Ω–∞—Ç–∞–º–∏: {ads_with_rooms_after}/{total_ads} ({ads_with_rooms_after/total_ads*100:.1f}%)")
        print(f"  –° –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º: {ads_with_heating_after}/{total_ads} ({ads_with_heating_after/total_ads*100:.1f}%)")
        print(f"  –° –º–µ–±–µ–ª—å—é: {ads_with_furniture_after}/{total_ads} ({ads_with_furniture_after/total_ads*100:.1f}%)")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        unique_ads_count = db.query(func.count(db_models.DBUniqueAd.id)).scalar() or 0
        print(f"\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {unique_ads_count}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_ai_pipeline_integration()) 