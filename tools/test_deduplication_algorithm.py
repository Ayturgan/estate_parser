#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
os.environ['DATABASE_URL'] = "postgresql://estate_user:admin123@localhost:5432/estate_db"
os.environ['DB_HOST'] = "localhost"
os.environ['DB_PORT'] = "5432"
os.environ['DB_NAME'] = "estate_db"
os.environ['DB_USER'] = "estate_user"
os.environ['DB_PASSWORD'] = "admin123"

from app.database import SessionLocal
from app.database import db_models
from app.utils.duplicate_processor import DuplicateProcessor
from sqlalchemy import func
import numpy as np

def test_deduplication_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)
    
    db = SessionLocal()
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –±–∞–∑–µ:")
        total_ads = db.query(func.count(db_models.DBAd.id)).scalar() or 0
        ads_with_area = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.area_sqm.isnot(None)
        ).scalar() or 0
        ads_with_rooms = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.rooms.isnot(None)
        ).scalar() or 0
        ads_with_floor = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.floor.isnot(None)
        ).scalar() or 0
        ads_with_description = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.description.isnot(None)
        ).scalar() or 0
        
        print(f"  –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_ads}")
        print(f"  –° –ø–ª–æ—â–∞–¥—å—é: {ads_with_area}/{total_ads} ({ads_with_area/total_ads*100:.1f}%)")
        print(f"  –° –∫–æ–º–Ω–∞—Ç–∞–º–∏: {ads_with_rooms}/{total_ads} ({ads_with_rooms/total_ads*100:.1f}%)")
        print(f"  –° —ç—Ç–∞–∂–æ–º: {ads_with_floor}/{total_ads} ({ads_with_floor/total_ads*100:.1f}%)")
        print(f"  –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: {ads_with_description}/{total_ads} ({ads_with_description/total_ads*100:.1f}%)")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
        print(f"  –¢–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –≤ _calculate_similarity_with_unique:")
        print(f"    –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: 50% (–æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π)")
        print(f"    –ê–¥—Ä–µ—Å: 20% (–≤–∞–∂–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)")
        print(f"    –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: 10% (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)")
        print(f"    –¢–µ–∫—Å—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ): 20-30% (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print(f"\n  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
        print(f"    –ú–µ—Ç–æ–¥ _get_text_embeddings: '{{ad.title}} {{ad.description}}'")
        print(f"    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GLiNER (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏–ª–∏ SentenceTransformer")
        print(f"    GLiNER: —Ä–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π")
        print(f"    SentenceTransformer: —Ä–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: 384 –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è!
        print(f"\n‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û:")
        print(f"  –í –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ç–µ–∫—Å—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ) –∏–º–µ–µ—Ç –≤–µ—Å 20-30%")
        print(f"  –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
        print(f"  –ü—Ä–∏ –Ω–∏–∑–∫–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–ø–ª–æ—â–∞–¥—å: {ads_with_area/total_ads*100:.1f}%)")
        print(f"  –∞–ª–≥–æ—Ä–∏—Ç–º —Å–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–º—ã—Å–ª—É —Ç–µ–∫—Å—Ç–∞")
        
        # 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GLiNER
        print(f"\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GLiNER:")
        print(f"  GLiNER –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
        print(f"  –ú–æ–¥–µ–ª—å: urchade/gliner_medium-v2.1")
        print(f"  –ò—â–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏: –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, —É—á–∞—Å—Ç–æ–∫, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∏ –¥—Ä.")
        print(f"  Fallback: SentenceTransformer –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GLiNER")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
        test_ad = db.query(db_models.DBAd).filter(
            db_models.DBAd.description.isnot(None)
        ).first()
        
        if test_ad:
            processor = DuplicateProcessor(db)
            text_embeddings = processor._get_text_embeddings(test_ad)
            print(f"  ‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {text_embeddings.shape}")
            print(f"  ‚úÖ –ò —Ç–µ–ø–µ—Ä—å –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏–º–µ—é—Ç –≤–µ—Å 20-30%")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
            test_ad2 = db.query(db_models.DBAd).filter(
                db_models.DBAd.description.isnot(None),
                db_models.DBAd.id != test_ad.id
            ).first()
            
            if test_ad2:
                text_embeddings2 = processor._get_text_embeddings(test_ad2)
                similarity = processor._calculate_text_similarity(text_embeddings, text_embeddings2)
                print(f"  –°—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ {test_ad.id} –∏ {test_ad2.id}: {similarity:.3f}")
                print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1: {test_ad.title[:50] if test_ad.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
                print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2: {test_ad2.title[:50] if test_ad2.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_deduplication_algorithm() 