#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

from app.database import SessionLocal
from app.database import db_models
from sqlalchemy import func, and_
import json

def test_deduplication_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    
    db = SessionLocal()
    try:
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
        print("=" * 50)
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_ads = db.query(func.count(db_models.DBAd.id)).scalar() or 0
        total_unique_ads = db.query(func.count(db_models.DBUniqueAd.id)).scalar() or 0
        total_duplicates = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.is_duplicate == True
        ).scalar() or 0
        unprocessed_ads = db.query(func.count(db_models.DBAd.id)).filter(
            and_(
                db_models.DBAd.is_processed == False,
                db_models.DBAd.is_duplicate == False
            )
        ).scalar() or 0
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_ads}")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_unique_ads}")
        print(f"  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_duplicates}")
        print(f"  –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {unprocessed_ads}")
        
        if total_ads > 0:
            dedup_ratio = (total_duplicates / total_ads) * 100
            print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {dedup_ratio:.1f}%")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        print(f"\nüè† –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        
        # –ü–ª–æ—â–∞–¥—å
        ads_with_area = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.area_sqm.isnot(None)
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–ª–æ—â–∞–¥—å—é: {ads_with_area}/{total_ads} ({ads_with_area/total_ads*100:.1f}%)")
        
        # –ö–æ–º–Ω–∞—Ç—ã
        ads_with_rooms = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.rooms.isnot(None)
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏: {ads_with_rooms}/{total_ads} ({ads_with_rooms/total_ads*100:.1f}%)")
        
        # –≠—Ç–∞–∂
        ads_with_floor = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.floor.isnot(None)
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å —ç—Ç–∞–∂–æ–º: {ads_with_floor}/{total_ads} ({ads_with_floor/total_ads*100:.1f}%)")
        
        # –õ–æ–∫–∞—Ü–∏—è
        ads_with_location = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.location_id.isnot(None)
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª–æ–∫–∞—Ü–∏–µ–π: {ads_with_location}/{total_ads} ({ads_with_location/total_ads*100:.1f}%)")
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        ads_with_photos = db.query(func.count(db_models.DBAd.id)).join(
            db_models.DBPhoto
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {ads_with_photos}/{total_ads} ({ads_with_photos/total_ads*100:.1f}%)")
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
        processed_photos = db.query(func.count(db_models.DBPhoto.id)).filter(
            db_models.DBPhoto.hash.isnot(None)
        ).scalar() or 0
        total_photos = db.query(func.count(db_models.DBPhoto.id)).scalar() or 0
        print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {processed_photos}/{total_photos} ({processed_photos/total_photos*100:.1f}%)")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        
        # –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        similar_characteristics = db.query(
            db_models.DBAd.area_sqm,
            db_models.DBAd.rooms,
            db_models.DBAd.floor,
            func.count(db_models.DBAd.id).label('count')
        ).filter(
            and_(
                db_models.DBAd.area_sqm.isnot(None),
                db_models.DBAd.rooms.isnot(None),
                db_models.DBAd.floor.isnot(None)
            )
        ).group_by(
            db_models.DBAd.area_sqm,
            db_models.DBAd.rooms,
            db_models.DBAd.floor
        ).having(
            func.count(db_models.DBAd.id) > 1
        ).all()
        
        print(f"  –ì—Ä—É–ø–ø —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {len(similar_characteristics)}")
        
        total_potential_duplicates = sum(group.count for group in similar_characteristics)
        print(f"  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_potential_duplicates}")
        
        # 4. –ü—Ä–∏–º–µ—Ä—ã –≥—Ä—É–ø–ø
        if similar_characteristics:
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            for i, group in enumerate(similar_characteristics[:5]):
                print(f"  –ì—Ä—É–ø–ø–∞ {i+1}: {group.rooms}–∫, {group.area_sqm}–º¬≤, {group.floor}—ç—Ç. - {group.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # 5. –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        print(f"\n‚úÖ –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:")
        
        if total_ads > 0:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            min_requirements = min(ads_with_area, ads_with_rooms, ads_with_location)
            coverage = (min_requirements / total_ads) * 100
            
            print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º: {coverage:.1f}%")
            
            if coverage > 50:
                print(f"  ‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ - –∞–ª–≥–æ—Ä–∏—Ç–º —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            elif coverage > 20:
                print(f"  ‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ - –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–∏—Ç —á–∞—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                print(f"  ‚ùå –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ - –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–∏—Ç –º–∞–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            if processed_photos > 0:
                photo_coverage = (processed_photos / total_photos) * 100
                print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ç–æ: {photo_coverage:.1f}%")
                
                if photo_coverage > 80:
                    print(f"  ‚úÖ –§–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                else:
                    print(f"  ‚ö†Ô∏è –ú–Ω–æ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ - —Å–Ω–∏–∂–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
        
        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if unprocessed_ads > 0:
            print(f"  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É {unprocessed_ads} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if processed_photos < total_photos * 0.8:
            print(f"  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({total_photos - processed_photos} –æ—Å—Ç–∞–ª–æ—Å—å)")
        
        if total_potential_duplicates > 0:
            print(f"  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ {total_potential_duplicates} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        if coverage < 50:
            print(f"  - –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–ª–æ—â–∞–¥—å, –∫–æ–º–Ω–∞—Ç—ã, –ª–æ–∫–∞—Ü–∏—è)")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    test_deduplication_status() 