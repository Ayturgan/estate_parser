#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–£–¥–∞–ª—è–µ—Ç —Å—Ö–µ–º—É public –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
"""

import psycopg2
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

# –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ë–î
DATABASE_URL = "postgresql://estate_user:admin123@localhost:5432/estate_db"

def reset_database():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ö–µ–º—É public –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ"""
    try:
        print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(DATABASE_URL)
        conn.autocommit = True
        cursor = conn.cursor()
        
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ pgAdmin)
        app_tables = [
            'ads', 
            'unique_ads',
            'photos',
            'unique_photos',
            'locations',
            'realtors',
            'ad_duplicates'
        ]
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for table in app_tables:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
            print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
        
        cursor.close()
        conn.close()
        
        print("üî® –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from app.database import db_models
        
        # –°–æ–∑–¥–∞–µ–º engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
        from sqlalchemy import create_engine
        engine = create_engine("postgresql://estate_user:admin123@localhost:5432/estate_db")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        db_models.Base.metadata.create_all(bind=engine)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def reset_processing_flags():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ is_processed —É —Å—ã—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        print("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(DATABASE_URL)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM ads;")
        total_ads = cursor.fetchone()[0]
        
        if total_ads == 0:
            print("üìä –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            cursor.close()
            conn.close()
            return True
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ is_processed –∏ is_duplicate
        cursor.execute("""
            UPDATE ads 
            SET is_processed = false, 
                is_duplicate = false,
                processed_at = NULL
            WHERE is_processed = true;
        """)
        
        updated_count = cursor.rowcount
        print(f"‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ —É {updated_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É unique_ads
        cursor.execute("DELETE FROM unique_ads;")
        unique_deleted = cursor.rowcount
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {unique_deleted} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ad_duplicates
        cursor.execute("DELETE FROM ad_duplicates;")
        duplicates_deleted = cursor.rowcount
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {duplicates_deleted} –∑–∞–ø–∏—Å–µ–π –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É realtors
        cursor.execute("DELETE FROM realtors;")
        realtors_deleted = cursor.rowcount
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {realtors_deleted} —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º realtor_id —É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        cursor.execute("UPDATE ads SET realtor_id = NULL;")
        realtor_reset = cursor.rowcount
        print(f"‚úÖ –°–±—Ä–æ—à–µ–Ω—ã realtor_id —É {realtor_reset} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        cursor.close()
        conn.close()
        
        print("üéâ –§–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!")
        print(f"üìä –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {total_ads} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üóÑÔ∏è –ü—Ä–æ—Å—Ç–æ–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "reset_flags":
        print("üîÑ –†–µ–∂–∏–º: —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        success = reset_processing_flags()
    else:
        print("üîÑ –†–µ–∂–∏–º: –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        success = reset_database()
    
    if success:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞!")
        sys.exit(1) 