#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ GLiNER
2. –ü–æ—ç—Ç–∞–ø–Ω–æ—Å—Ç—å –ø–∞–π–ø–ª–∞–π–Ω–∞
3. –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ø–∞–º–∞ —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
TEST_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

async def test_api_endpoint(session, endpoint, method="GET", data=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint"""
    url = f"{API_BASE_URL}{endpoint}"
    try:
        if method == "GET":
            async with session.get(url) as response:
                return await response.json(), response.status
        elif method == "POST":
            async with session.post(url, json=data) as response:
                return await response.json(), response.status
    except Exception as e:
        return {"error": str(e)}, 500

async def check_photo_processing_status(session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ...")
    result, status = await test_api_endpoint(session, "/api/process/photos/status")
    
    if status == 200:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {result.get('status', 'unknown')}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', 'N/A')}")
        if 'stats' in result:
            stats = result['stats']
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed_photos', 0)}/{stats.get('total_photos', 0)}")
        return result.get('status') == 'completed'
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ: {result}")
        return False

async def check_duplicate_processing_status(session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    result, status = await test_api_endpoint(session, "/api/process/duplicates/status")
    
    if status == 200:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result.get('status', 'unknown')}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', 'N/A')}")
        return result.get('status') == 'completed'
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result}")
        return False

async def check_automation_status(session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    result, status = await test_api_endpoint(session, "/api/automation/status")
    
    if status == 200:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {result.get('status', 'unknown')}")
        print(f"   –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {result.get('current_stage', 'N/A')}")
        return result
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {result}")
        return None

async def test_photo_processing(session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ"""
    print("\nüì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ
    result, status = await test_api_endpoint(session, "/api/process/photos", "POST")
    
    if status == 202:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        start_time = time.time()
        while time.time() - start_time < TEST_TIMEOUT:
            if await check_photo_processing_status(session):
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            await asyncio.sleep(5)
        
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
        return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {result}")
        return False

async def test_duplicate_processing(session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    result, status = await test_api_endpoint(session, "/api/process/duplicates", "POST")
    
    if status == 202:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        start_time = time.time()
        while time.time() - start_time < TEST_TIMEOUT:
            if await check_duplicate_processing_status(session):
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            await asyncio.sleep(5)
        
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result}")
        return False

async def test_automation_pipeline(session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    result, status = await test_api_endpoint(session, "/api/automation/start", "POST")
    
    if status == 200:
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        start_time = time.time()
        last_stage = None
        
        while time.time() - start_time < TEST_TIMEOUT:
            automation_status = await check_automation_status(session)
            
            if automation_status:
                current_stage = automation_status.get('current_stage', 'unknown')
                status = automation_status.get('status', 'unknown')
                
                if current_stage != last_stage:
                    print(f"üìä –≠—Ç–∞–ø: {current_stage}, –°—Ç–∞—Ç—É—Å: {status}")
                    last_stage = current_stage
                
                if status == 'completed':
                    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                elif status == 'error':
                    print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    return False
            
            await asyncio.sleep(10)
        
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {result}")
        return False

async def check_logs_for_errors():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏...")
    
    try:
        with open('logs/api_container_logs.txt', 'r', encoding='utf-8') as f:
            logs = f.read()
        
        # –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        error_patterns = [
            "can't multiply sequence by non-int of type 'float'",
            "asyncio.create_task",
            "Event emitted: duplicate_processing_progress",
            "Error processing ad"
        ]
        
        found_errors = []
        for pattern in error_patterns:
            if pattern in logs:
                count = logs.count(pattern)
                found_errors.append(f"{pattern}: {count} —Ä–∞–∑")
        
        if found_errors:
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for error in found_errors:
                print(f"   - {error}")
        else:
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        result, status = await test_api_endpoint(session, "/api/status")
        if status != 200:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result}")
            return
        
        print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ
        photo_success = await test_photo_processing(session)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicate_success = await test_duplicate_processing(session)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        automation_success = await test_automation_pipeline(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        await check_logs_for_errors()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*50)
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: {'‚úÖ' if photo_success else '‚ùå'}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {'‚úÖ' if duplicate_success else '‚ùå'}")
        print(f"–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: {'‚úÖ' if automation_success else '‚ùå'}")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now()}")
        
        if photo_success and duplicate_success and automation_success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 