#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
os.environ['DATABASE_URL'] = "postgresql://estate_user:admin123@localhost:5432/estate_db"
os.environ['DB_HOST'] = "localhost"
os.environ['DB_PORT'] = "5432"
os.environ['DB_NAME'] = "estate_db"
os.environ['DB_USER'] = "estate_user"
os.environ['DB_PASSWORD'] = "admin123"

from app.database import SessionLocal
from app.database import db_models
from app.services.ai_data_extractor import AIDataExtractor
from sqlalchemy import func, and_
import json

def test_ai_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–±–µ–∑ —Ç–∏–ø–∞, —Å–¥–µ–ª–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ç–∏–ø–∞, —Å–¥–µ–ª–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    try:
        ai_extractor = AIDataExtractor()
        print("‚úÖ AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_ads = db.query(db_models.DBAd).filter(
            db_models.DBAd.description.isnot(None)
        ).limit(5).all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(test_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if not test_ads:
            print("‚ùå –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        for i, ad in enumerate(test_ads, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}/{len(test_ads)}")
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {ad.title[:100] if ad.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
            print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {ad.description[:200] if ad.description else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}...")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            full_text = f"{ad.title or ''} {ad.description or ''}".strip()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            try:
                extracted_data = ai_extractor.extract_and_classify(
                    title=ad.title or "",
                    description=ad.description or "",
                    existing_data={}
                )
                
                print(f"‚úÖ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"  üè† –ö–æ–º–Ω–∞—Ç—ã: {extracted_data.get('rooms')}")
                print(f"  üìê –ü–ª–æ—â–∞–¥—å: {extracted_data.get('area_sqm')} –º¬≤")
                print(f"  üè¢ –≠—Ç–∞–∂: {extracted_data.get('floor')}/{extracted_data.get('total_floors')}")
                print(f"  üìç –õ–æ–∫–∞—Ü–∏—è: {extracted_data.get('location')}")
                print(f"  üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ: {extracted_data.get('heating')}")
                print(f"  ü™ë –ú–µ–±–µ–ª—å: {extracted_data.get('furniture')}")
                print(f"  üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: {extracted_data.get('condition')}")
                print(f"  üõ†Ô∏è –£–¥–æ–±—Å—Ç–≤–∞: {extracted_data.get('amenities')}")
                print(f"  üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extracted_data.get('extraction_quality', 0):.2f}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                if extracted_data.get('area_sqm'):
                    ad.area_sqm = extracted_data['area_sqm']
                    print(f"  üíæ –ü–ª–æ—â–∞–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {ad.area_sqm}")
                if extracted_data.get('rooms'):
                    ad.rooms = extracted_data['rooms']
                    print(f"  üíæ –ö–æ–º–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {ad.rooms}")
                if extracted_data.get('floor'):
                    ad.floor = extracted_data['floor']
                    print(f"  üíæ –≠—Ç–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {ad.floor}")
                if extracted_data.get('total_floors'):
                    ad.total_floors = extracted_data['total_floors']
                    print(f"  üíæ –û–±—â–∞—è —ç—Ç–∞–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {ad.total_floors}")
                if extracted_data.get('location'):
                    ad.location = extracted_data['location']
                    print(f"  üíæ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {ad.location}")
                if extracted_data.get('heating'):
                    ad.heating = extracted_data['heating']
                    print(f"  üíæ –û—Ç–æ–ø–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {ad.heating}")
                if extracted_data.get('furniture'):
                    ad.furniture = extracted_data['furniture']
                    print(f"  üíæ –ú–µ–±–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {ad.furniture}")
                if extracted_data.get('condition'):
                    ad.condition = extracted_data['condition']
                    print(f"  üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {ad.condition}")
                if extracted_data.get('amenities'):
                    ad.amenities = json.dumps(extracted_data['amenities'])
                    print(f"  üíæ –£–¥–æ–±—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {ad.amenities}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        try:
            db.commit()
            print(f"\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            db.rollback()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        ads_with_area = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.area_sqm.isnot(None)
        ).scalar() or 0
        total_ads = db.query(func.count(db_models.DBAd.id)).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–ª–æ—â–∞–¥—å—é: {ads_with_area}/{total_ads} ({ads_with_area/total_ads*100:.1f}%)")
        ads_with_rooms = db.query(func.count(db_models.DBAd.id)).filter(
            db_models.DBAd.rooms.isnot(None)
        ).scalar() or 0
        print(f"  –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏: {ads_with_rooms}/{total_ads} ({ads_with_rooms/total_ads*100:.1f}%)")
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    test_ai_extraction() 