#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–µ–∑ —Ö–µ—à–µ–π
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python process_photos.py
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal
from app.services.photo_service import PhotoService
from app import db_models

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('process_photos.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    logger.info("üñºÔ∏è Starting mass photo processing...")
    
    db = SessionLocal()
    photo_service = PhotoService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        stats_before = photo_service.get_processing_stats(db)
        logger.info(f"üìä Statistics before processing:")
        logger.info(f"   Total photos: {stats_before['total_photos']}")
        logger.info(f"   Processed photos: {stats_before['processed_photos']}")
        logger.info(f"   Unprocessed photos: {stats_before['unprocessed_photos']}")
        logger.info(f"   Processing percentage: {stats_before['processing_percentage']:.1f}%")
        
        if stats_before['unprocessed_photos'] == 0:
            logger.info("‚úÖ All photos are already processed!")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        start_time = datetime.now()
        logger.info(f"üîÑ Starting processing of {stats_before['unprocessed_photos']} photos...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–∞—Ç—á–∞–º–∏
        batch_size = 50
        total_processed = 0
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            current_stats = photo_service.get_processing_stats(db)
            unprocessed = current_stats['unprocessed_photos']
            
            if unprocessed == 0:
                break
            
            logger.info(f"üì¶ Processing batch: {min(batch_size, unprocessed)} photos remaining...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
            await photo_service.process_all_unprocessed_photos(db, batch_size)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            new_stats = photo_service.get_processing_stats(db)
            processed_in_batch = current_stats['processed_photos'] - new_stats['processed_photos']
            total_processed += processed_in_batch
            
            logger.info(f"‚úÖ Batch completed. Processed: {processed_in_batch}, Total: {total_processed}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        stats_after = photo_service.get_processing_stats(db)
        
        logger.info(f"üéâ Photo processing completed!")
        logger.info(f"üìä Final statistics:")
        logger.info(f"   Total photos: {stats_after['total_photos']}")
        logger.info(f"   Processed photos: {stats_after['processed_photos']}")
        logger.info(f"   Unprocessed photos: {stats_after['unprocessed_photos']}")
        logger.info(f"   Processing percentage: {stats_after['processing_percentage']:.1f}%")
        logger.info(f"‚è±Ô∏è Total processing time: {duration:.2f} seconds")
        logger.info(f"üöÄ Processing speed: {total_processed/duration:.2f} photos/second")
        
        if stats_after['unprocessed_photos'] > 0:
            logger.warning(f"‚ö†Ô∏è {stats_after['unprocessed_photos']} photos could not be processed")
        else:
            logger.info("‚úÖ All photos successfully processed!")
            
    except Exception as e:
        logger.error(f"‚ùå Error during photo processing: {e}")
        raise
    finally:
        db.close()

def get_photo_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("üìä Getting photo statistics...")
    
    db = SessionLocal()
    photo_service = PhotoService()
    
    try:
        stats = photo_service.get_processing_stats(db)
        
        logger.info(f"üìä Photo Statistics:")
        logger.info(f"   Total photos: {stats['total_photos']}")
        logger.info(f"   Processed photos: {stats['processed_photos']}")
        logger.info(f"   Unprocessed photos: {stats['unprocessed_photos']}")
        logger.info(f"   Processing percentage: {stats['processing_percentage']:.1f}%")
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Error getting photo stats: {e}")
        return None
    finally:
        db.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Mass photo processing script')
    parser.add_argument('--stats-only', action='store_true', 
                       help='Only show statistics without processing')
    parser.add_argument('--batch-size', type=int, default=50,
                       help='Batch size for processing (default: 50)')
    
    args = parser.parse_args()
    
    if args.stats_only:
        get_photo_stats()
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        asyncio.run(main()) 