import logging
import os
from datetime import datetime
from typing import Optional
import json

class ScrapingLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, job_id: str, config_name: str):
        self.job_id = job_id
        self.config_name = config_name
        self.log_dir = "/app/logs/scraping"
        self.ensure_log_directory()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        self.logger = logging.getLogger(f"scraping_{job_id}")
        self.logger.setLevel(logging.DEBUG)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if not self.logger.handlers:
            self.setup_handlers()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–∞—á–∏
        self.stats = {
            'job_id': job_id,
            'config_name': config_name,
            'started_at': datetime.now().isoformat(),
            'items_total': 0,
            'items_processed': 0,
            'items_failed': 0,
            'pages_processed': 0,
            'api_calls_success': 0,
            'api_calls_failed': 0,
            'errors': [],
            'warnings': []
        }
    
    def ensure_log_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(self.log_dir, exist_ok=True)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–æ–≤"""
        # –§–∞–π–ª –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
        detail_log_file = f"{self.log_dir}/scraping_{self.job_id}_{self.config_name}.log"
        detail_handler = logging.FileHandler(detail_log_file, encoding='utf-8')
        detail_handler.setLevel(logging.DEBUG)
        
        # –§–∞–π–ª —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
        error_log_file = f"{self.log_dir}/scraping_{self.job_id}_{self.config_name}_errors.log"
        error_handler = logging.FileHandler(error_log_file, encoding='utf-8')
        error_handler.setLevel(logging.ERROR)
        
        # –û–±—â–∏–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        stats_log_file = f"{self.log_dir}/scraping_stats.log"
        stats_handler = logging.FileHandler(stats_log_file, encoding='utf-8')
        stats_handler.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        detail_formatter = logging.Formatter(
            '%(asctime)s [%(name)s] %(levelname)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        error_formatter = logging.Formatter(
            '%(asctime)s [JOB:%(job_id)s|%(config)s] %(levelname)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        detail_handler.setFormatter(detail_formatter)
        error_handler.setFormatter(detail_formatter)
        stats_handler.setFormatter(detail_formatter)
        
        self.logger.addHandler(detail_handler)
        self.logger.addHandler(error_handler)
        self.logger.addHandler(stats_handler)
        
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(
            f'[JOB:{self.job_id[:8]}|{self.config_name}] %(levelname)s: %(message)s'
        )
        console_handler.setFormatter(console_formatter)
        self.logger.addHandler(console_handler)
    
    def log_job_start(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏"""
        self.logger.info("=" * 60)
        self.logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ó–ê–î–ê–ß–ò –ü–ê–†–°–ò–ù–ì–ê")
        self.logger.info(f"üìã Job ID: {self.job_id}")
        self.logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥: {self.config_name}")
        self.logger.info(f"üïê –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {self.stats['started_at']}")
        self.logger.info("=" * 60)
    
    def log_job_end(self, status: str = "completed", error: Optional[str] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.stats['finished_at'] = datetime.now().isoformat()
        self.stats['status'] = status
        if error:
            self.stats['final_error'] = error
            
        duration = self._calculate_duration()
        
        self.logger.info("=" * 60)
        self.logger.info(f"üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ü–ê–†–°–ò–ù–ì–ê")
        self.logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        self.logger.info(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['pages_processed']}")
        self.logger.info(f"   üè† –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {self.stats['items_total']}")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['items_processed']}")
        self.logger.info(f"   ‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.stats['items_failed']}")
        self.logger.info(f"   üì° API –≤—ã–∑–æ–≤–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö: {self.stats['api_calls_success']}")
        self.logger.info(f"   üö´ API –≤—ã–∑–æ–≤–æ–≤ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö: {self.stats['api_calls_failed']}")
        self.logger.info(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.stats['warnings'])}")
        self.logger.info(f"   üí• –û—à–∏–±–æ–∫: {len(self.stats['errors'])}")
        self.logger.info(f"   üéØ –°—Ç–∞—Ç—É—Å: {status.upper()}")
        if error:
            self.logger.error(f"   üî• –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        self.logger.info("=" * 60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        self._save_stats()
    
    def log_page_processed(self, page_num: int, items_found: int, url: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.stats['pages_processed'] += 1
        self.stats['items_total'] += items_found
        
        self.logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {items_found} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        if url:
            self.logger.debug(f"   üîó URL: {url}")
    
    def log_item_processing(self, item_title: str, item_url: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        self.logger.debug(f"üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {item_title}")
        if item_url:
            self.logger.debug(f"   üîó URL: {item_url}")
    
    def log_item_success(self, item_title: str, extracted_data: dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        self.stats['items_processed'] += 1
        
        self.logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {item_title}")
        if extracted_data:
            property_type = extracted_data.get('property_type', 'N/A')
            listing_type = extracted_data.get('listing_type', 'N/A')
            rooms = extracted_data.get('rooms', 'N/A')
            area = extracted_data.get('area_sqm', 'N/A')
            self.logger.debug(f"   üìä –î–∞–Ω–Ω—ã–µ: {property_type}, {listing_type}, {rooms} –∫–æ–º–Ω., {area} –º¬≤")
    
    def log_item_failure(self, item_title: str, error: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        self.stats['items_failed'] += 1
        self.stats['errors'].append({
            'timestamp': datetime.now().isoformat(),
            'type': 'item_processing',
            'item': item_title,
            'error': error
        })
        
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {item_title}")
        self.logger.error(f"   üí• –û—à–∏–±–∫–∞: {error}")
    
    def log_api_call_success(self, item_title: str, endpoint: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ API"""
        self.stats['api_calls_success'] += 1
        
        self.logger.info(f"üì° API: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - {item_title}")
        if endpoint:
            self.logger.debug(f"   üéØ Endpoint: {endpoint}")
    
    def log_api_call_failure(self, item_title: str, error: str, endpoint: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤—ã–∑–æ–≤–∞ API"""
        self.stats['api_calls_failed'] += 1
        self.stats['errors'].append({
            'timestamp': datetime.now().isoformat(),
            'type': 'api_call',
            'item': item_title,
            'endpoint': endpoint,
            'error': error
        })
        
        self.logger.error(f"üö´ API: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - {item_title}")
        self.logger.error(f"   üí• –û—à–∏–±–∫–∞: {error}")
        if endpoint:
            self.logger.debug(f"   üéØ Endpoint: {endpoint}")
    
    def log_warning(self, message: str, context: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.stats['warnings'].append({
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'context': context
        })
        
        self.logger.warning(f"‚ö†Ô∏è {message}")
        if context:
            self.logger.debug(f"   üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
    
    def log_error(self, message: str, context: str = "", exception: Exception = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        error_data = {
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'context': context
        }
        if exception:
            error_data['exception'] = str(exception)
            error_data['exception_type'] = type(exception).__name__
        
        self.stats['errors'].append(error_data)
        
        self.logger.error(f"üí• {message}")
        if context:
            self.logger.debug(f"   üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        if exception:
            self.logger.debug(f"   üêõ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {exception}")
    
    def log_ai_processing(self, title: str, description: str, result: dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        text_len = len(f"{title} {description}".strip())
        self.logger.debug(f"ü§ñ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞: '{title}' (—Ç–µ–∫—Å—Ç: {text_len} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if result:
            property_type = result.get('property_type', 'N/A')
            property_confidence = result.get('property_type_confidence', 0)
            listing_type = result.get('listing_type', 'N/A')
            listing_confidence = result.get('listing_type_confidence', 0)
            quality = result.get('extraction_quality', 0)
            
            self.logger.debug(f"   üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {property_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {property_confidence:.2f})")
            self.logger.debug(f"   üìã –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {listing_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {listing_confidence:.2f})")
            self.logger.debug(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {quality:.2f}")
    
    def log_request_failure(self, url: str, error: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        self.stats['api_calls_failed'] += 1
        self.stats['errors'].append({
            'timestamp': datetime.now().isoformat(),
            'type': 'http_request',
            'url': url,
            'error': error
        })
        
        self.logger.error(f"üö´ HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {url}")
        self.logger.error(f"   üí• –û—à–∏–±–∫–∞: {error}")
    
    def log_spider_finished(self, stats: dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–ø–∞–π–¥–µ—Ä–∞"""
        self.logger.info("üï∑Ô∏è –°–ø–∞–π–¥–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        self.logger.info(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if 'scraped_items' in stats:
            self.stats['items_total'] = stats['scraped_items']
        if 'category_breakdown' in stats:
            self.logger.info("   üìÇ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in stats['category_breakdown'].items():
                self.logger.info(f"      {category}: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.stats.copy()
    
    def _calculate_duration(self) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if 'finished_at' not in self.stats:
            return "N/A"
        
        try:
            start = datetime.fromisoformat(self.stats['started_at'])
            end = datetime.fromisoformat(self.stats['finished_at'])
            duration = end - start
            
            total_seconds = int(duration.total_seconds())
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            if hours > 0:
                return f"{hours}—á {minutes}–º {seconds}—Å"
            elif minutes > 0:
                return f"{minutes}–º {seconds}—Å"
            else:
                return f"{seconds}—Å"
        except:
            return "N/A"
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON —Ñ–∞–π–ª"""
        stats_file = f"{self.log_dir}/scraping_{self.job_id}_{self.config_name}_stats.json"
        try:
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ª–æ–≥–≥–µ—Ä–æ–≤
_loggers_registry = {}

def get_scraping_logger(job_id: str, config_name: str) -> ScrapingLogger:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏"""
    key = f"{job_id}_{config_name}"
    if key not in _loggers_registry:
        _loggers_registry[key] = ScrapingLogger(job_id, config_name)
    return _loggers_registry[key]

def remove_scraping_logger(job_id: str, config_name: str):
    """–£–¥–∞–ª—è–µ—Ç –ª–æ–≥–≥–µ—Ä –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    key = f"{job_id}_{config_name}"
    if key in _loggers_registry:
        del _loggers_registry[key] 